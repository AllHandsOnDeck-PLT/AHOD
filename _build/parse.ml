type token =
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | LSQUARE
  | RSQUARE
  | SERIESADD
  | SERIES
  | CARD
  | PLAYER
  | COLON
  | SEMI
  | COMMA
  | PLUS
  | MINUS
  | MULT
  | DIVIDE
  | ASSIGN
  | MOD
  | POWER
  | FLOOR
  | DOT
  | DOTDOT
  | DOTDOTDOT
  | NEWLINE
  | NOT
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | AND
  | OR
  | IN
  | RETURN
  | IF
  | ELIF
  | ELSE
  | FOR
  | WHILE
  | INT
  | BOOL
  | FLOAT
  | NONE
  | STRING
  | RANGE
  | WHEN
  | DO
  | EXTERNAL
  | LET
  | BE
  | WITH
  | PASS
  | MAIN
  | TIMES
  | CONST
  | ILIT of (int)
  | BLIT of (bool)
  | ID of (string)
  | ACTIONID of (string)
  | CLASSID of (string)
  | FLIT of (string)
  | SLIT of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "parse.mly"
open Ast

let frst (a,_,_) = a;;
let scnd (_,b,_) = b;;
let trd (_,_,c) = c;;

# 78 "parse.ml"
let yytransl_const = [|
  257 (* LPAREN *);
  258 (* RPAREN *);
  259 (* LBRACE *);
  260 (* RBRACE *);
  261 (* LSQUARE *);
  262 (* RSQUARE *);
  263 (* SERIESADD *);
  264 (* SERIES *);
  265 (* CARD *);
  266 (* PLAYER *);
  267 (* COLON *);
  268 (* SEMI *);
  269 (* COMMA *);
  270 (* PLUS *);
  271 (* MINUS *);
  272 (* MULT *);
  273 (* DIVIDE *);
  274 (* ASSIGN *);
  275 (* MOD *);
  276 (* POWER *);
  277 (* FLOOR *);
  278 (* DOT *);
  279 (* DOTDOT *);
  280 (* DOTDOTDOT *);
  281 (* NEWLINE *);
  282 (* NOT *);
  283 (* EQ *);
  284 (* NEQ *);
  285 (* LT *);
  286 (* LEQ *);
  287 (* GT *);
  288 (* GEQ *);
  289 (* AND *);
  290 (* OR *);
  291 (* IN *);
  292 (* RETURN *);
  293 (* IF *);
  294 (* ELIF *);
  295 (* ELSE *);
  296 (* FOR *);
  297 (* WHILE *);
  298 (* INT *);
  299 (* BOOL *);
  300 (* FLOAT *);
  301 (* NONE *);
  302 (* STRING *);
  303 (* RANGE *);
  304 (* WHEN *);
  305 (* DO *);
  306 (* EXTERNAL *);
  307 (* LET *);
  308 (* BE *);
  309 (* WITH *);
  310 (* PASS *);
  311 (* MAIN *);
  312 (* TIMES *);
  313 (* CONST *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  314 (* ILIT *);
  315 (* BLIT *);
  316 (* ID *);
  317 (* ACTIONID *);
  318 (* CLASSID *);
  319 (* FLIT *);
  320 (* SLIT *);
    0|]

let yylhs = "\255\255\
\001\000\004\000\002\000\002\000\002\000\007\000\003\000\009\000\
\010\000\011\000\011\000\011\000\011\000\012\000\005\000\005\000\
\014\000\006\000\015\000\015\000\016\000\016\000\016\000\016\000\
\016\000\016\000\016\000\016\000\018\000\018\000\019\000\019\000\
\020\000\020\000\021\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\023\000\023\000\025\000\025\000\022\000\024\000\
\024\000\026\000\017\000\017\000\000\000"

let yylen = "\002\000\
\003\000\008\000\000\000\002\000\002\000\003\000\003\000\008\000\
\006\000\001\000\001\000\002\000\002\000\005\000\001\000\003\000\
\002\000\006\000\001\000\002\000\001\000\002\000\003\000\001\000\
\010\000\006\000\004\000\006\000\005\000\005\000\005\000\005\000\
\000\000\001\000\003\000\001\000\001\000\001\000\001\000\001\000\
\004\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\003\000\004\000\001\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\001\000\000\000\001\000\001\000\003\000\005\000\004\000\
\004\000\003\000\000\000\001\000\002\000"

let yydefred = "\000\000\
\003\000\000\000\077\000\000\000\000\000\044\000\043\000\036\000\
\037\000\038\000\040\000\039\000\000\000\000\000\042\000\000\000\
\005\000\004\000\000\000\000\000\000\000\000\000\001\000\000\000\
\000\000\000\000\000\000\007\000\006\000\041\000\000\000\000\000\
\000\000\000\000\015\000\000\000\000\000\000\000\017\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\046\000\
\048\000\000\000\047\000\049\000\021\000\000\000\000\000\019\000\
\024\000\045\000\066\000\000\000\016\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\022\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\020\000\002\000\050\000\000\000\000\000\
\000\000\023\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\056\000\057\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\018\000\000\000\
\073\000\072\000\000\000\000\000\000\000\027\000\000\000\051\000\
\000\000\000\000\000\000\029\000\030\000\034\000\000\000\000\000\
\071\000\000\000\000\000\000\000\000\000\026\000\028\000\000\000\
\035\000\000\000\000\000\000\000\031\000\032\000\000\000\025\000"

let yydgoto = "\002\000\
\003\000\004\000\016\000\017\000\033\000\053\000\018\000\034\000\
\000\000\000\000\000\000\000\000\063\000\035\000\055\000\056\000\
\069\000\057\000\132\000\133\000\134\000\058\000\064\000\059\000\
\065\000\000\000"

let yysindex = "\009\000\
\000\000\000\000\000\000\054\255\242\254\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\229\254\016\255\000\000\039\000\
\000\000\000\000\253\254\160\255\010\255\034\255\000\000\050\255\
\047\255\078\255\079\255\000\000\000\000\000\000\160\255\065\255\
\063\255\031\255\000\000\151\255\090\255\160\255\000\000\009\255\
\102\255\103\255\009\255\009\255\001\255\009\255\044\255\000\000\
\000\000\255\254\000\000\000\000\000\000\122\001\083\255\000\000\
\000\000\000\000\000\000\034\255\000\000\254\254\164\001\101\255\
\097\255\009\255\009\255\164\001\086\255\014\001\009\255\077\255\
\038\001\112\255\009\255\009\255\108\255\009\255\009\255\009\255\
\009\255\000\000\009\255\009\255\009\255\009\255\009\255\009\255\
\009\255\009\255\100\255\000\000\000\000\000\000\009\255\131\255\
\132\255\000\000\034\255\078\001\009\255\034\255\009\255\005\001\
\164\001\136\255\252\254\252\254\000\000\000\000\196\001\196\001\
\069\255\069\255\069\255\069\255\192\001\172\001\000\000\164\001\
\000\000\000\000\249\254\009\255\046\001\000\000\137\255\000\000\
\009\255\009\255\127\255\000\000\000\000\000\000\101\001\034\255\
\000\000\177\000\070\001\034\255\009\255\000\000\000\000\034\255\
\000\000\198\000\249\254\133\255\000\000\000\000\034\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\139\255\
\000\000\000\000\124\255\000\000\000\000\000\000\000\000\000\000\
\000\000\143\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\214\255\024\255\000\000\
\023\255\148\255\148\255\128\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\148\255\000\000\
\115\255\000\000\247\255\024\000\000\000\000\000\146\255\231\000\
\057\000\090\000\123\000\156\000\249\000\022\255\000\000\068\255\
\000\000\000\000\126\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\126\255\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\234\255\000\000\003\000\
\000\000\000\000\000\000\000\000\221\255\116\000\000\000\100\000\
\000\000\000\000\017\000\018\000\000\000\000\000\195\255\000\000\
\000\000\000\000"

let yytablesize = 740
let yytable = "\028\000\
\054\000\071\000\075\000\075\000\096\000\097\000\019\000\068\000\
\070\000\001\000\073\000\080\000\081\000\040\000\020\000\076\000\
\076\000\041\000\042\000\054\000\077\000\021\000\025\000\059\000\
\068\000\069\000\022\000\059\000\068\000\069\000\130\000\131\000\
\059\000\059\000\059\000\100\000\069\000\093\000\023\000\104\000\
\105\000\127\000\107\000\108\000\109\000\110\000\059\000\111\000\
\112\000\113\000\114\000\115\000\116\000\117\000\118\000\059\000\
\024\000\047\000\027\000\120\000\072\000\005\000\006\000\007\000\
\037\000\125\000\048\000\049\000\062\000\070\000\026\000\051\000\
\052\000\070\000\029\000\038\000\123\000\030\000\031\000\126\000\
\070\000\032\000\078\000\079\000\080\000\081\000\091\000\040\000\
\135\000\036\000\039\000\041\000\042\000\138\000\139\000\008\000\
\009\000\010\000\011\000\012\000\060\000\013\000\066\000\067\000\
\074\000\146\000\094\000\027\000\014\000\095\000\098\000\101\000\
\103\000\142\000\106\000\015\000\053\000\145\000\043\000\044\000\
\053\000\147\000\045\000\046\000\119\000\053\000\053\000\053\000\
\152\000\033\000\033\000\047\000\121\000\122\000\033\000\033\000\
\129\000\140\000\137\000\053\000\048\000\049\000\050\000\151\000\
\067\000\051\000\052\000\060\000\075\000\067\000\033\000\060\000\
\076\000\061\000\092\000\040\000\060\000\060\000\060\000\041\000\
\042\000\033\000\033\000\149\000\150\000\033\000\033\000\005\000\
\006\000\007\000\060\000\000\000\060\000\060\000\033\000\027\000\
\000\000\000\000\060\000\060\000\000\000\000\000\000\000\033\000\
\033\000\033\000\043\000\044\000\033\000\033\000\045\000\046\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\047\000\
\000\000\008\000\009\000\010\000\011\000\012\000\000\000\000\000\
\048\000\049\000\050\000\000\000\000\000\051\000\052\000\052\000\
\000\000\000\000\000\000\052\000\000\000\015\000\000\000\000\000\
\052\000\052\000\052\000\052\000\052\000\052\000\052\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\052\000\000\000\
\052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
\054\000\000\000\000\000\000\000\054\000\000\000\000\000\000\000\
\000\000\054\000\054\000\054\000\054\000\054\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\054\000\
\000\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
\054\000\055\000\000\000\000\000\000\000\055\000\000\000\000\000\
\000\000\000\000\055\000\055\000\055\000\055\000\055\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\055\000\000\000\055\000\055\000\055\000\055\000\055\000\055\000\
\055\000\055\000\062\000\000\000\000\000\000\000\062\000\000\000\
\000\000\000\000\000\000\062\000\062\000\062\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\062\000\000\000\062\000\062\000\062\000\062\000\062\000\
\062\000\062\000\062\000\063\000\000\000\000\000\000\000\063\000\
\000\000\000\000\000\000\000\000\063\000\063\000\063\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\063\000\000\000\063\000\063\000\063\000\063\000\
\063\000\063\000\063\000\063\000\064\000\000\000\000\000\000\000\
\064\000\000\000\000\000\000\000\000\000\064\000\064\000\064\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\064\000\000\000\064\000\064\000\064\000\
\064\000\064\000\064\000\064\000\064\000\065\000\000\000\000\000\
\000\000\065\000\000\000\000\000\000\000\000\000\065\000\065\000\
\065\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\143\000\000\000\065\000\000\000\065\000\065\000\
\065\000\065\000\065\000\065\000\065\000\065\000\078\000\079\000\
\080\000\081\000\000\000\000\000\000\000\000\000\000\000\148\000\
\000\000\000\000\000\000\083\000\084\000\085\000\086\000\087\000\
\088\000\089\000\090\000\078\000\079\000\080\000\081\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\083\000\084\000\085\000\086\000\087\000\088\000\089\000\090\000\
\061\000\000\000\000\000\000\000\061\000\000\000\000\000\000\000\
\000\000\061\000\061\000\061\000\000\000\000\000\000\000\000\000\
\000\000\000\000\058\000\000\000\000\000\000\000\058\000\061\000\
\000\000\061\000\061\000\058\000\058\000\058\000\000\000\061\000\
\061\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\
\000\000\058\000\078\000\079\000\080\000\081\000\000\000\000\000\
\099\000\058\000\058\000\078\000\079\000\080\000\081\000\083\000\
\084\000\085\000\086\000\087\000\088\000\089\000\090\000\000\000\
\083\000\084\000\085\000\086\000\087\000\088\000\089\000\090\000\
\102\000\000\000\000\000\078\000\079\000\080\000\081\000\000\000\
\136\000\000\000\000\000\078\000\079\000\080\000\081\000\000\000\
\083\000\084\000\085\000\086\000\087\000\088\000\089\000\090\000\
\083\000\084\000\085\000\086\000\087\000\088\000\089\000\090\000\
\144\000\000\000\000\000\078\000\079\000\080\000\081\000\000\000\
\000\000\124\000\000\000\078\000\079\000\080\000\081\000\000\000\
\083\000\084\000\085\000\086\000\087\000\088\000\089\000\090\000\
\083\000\084\000\085\000\086\000\087\000\088\000\089\000\090\000\
\141\000\000\000\078\000\079\000\080\000\081\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\083\000\
\084\000\085\000\086\000\087\000\088\000\089\000\090\000\078\000\
\079\000\080\000\081\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\082\000\000\000\083\000\084\000\085\000\086\000\
\087\000\088\000\089\000\090\000\052\000\052\000\052\000\052\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\052\000\
\000\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
\052\000\078\000\079\000\080\000\081\000\000\000\000\000\000\000\
\000\000\078\000\079\000\080\000\081\000\000\000\083\000\084\000\
\085\000\086\000\087\000\088\000\089\000\090\000\083\000\084\000\
\085\000\086\000\087\000\088\000\089\000\078\000\079\000\080\000\
\081\000\078\000\079\000\080\000\081\000\000\000\000\000\000\000\
\000\000\000\000\083\000\084\000\085\000\086\000\087\000\088\000\
\085\000\086\000\087\000\088\000"

let yycheck = "\022\000\
\036\000\001\001\005\001\005\001\066\000\067\000\004\000\043\000\
\044\000\001\000\046\000\016\001\017\001\005\001\029\001\018\001\
\018\001\009\001\010\001\055\000\022\001\049\001\020\000\002\001\
\002\001\002\001\011\001\006\001\006\001\006\001\038\001\039\001\
\011\001\012\001\013\001\071\000\013\001\060\000\000\000\075\000\
\076\000\103\000\078\000\079\000\080\000\081\000\025\001\083\000\
\084\000\085\000\086\000\087\000\088\000\089\000\090\000\034\001\
\060\001\049\001\025\001\095\000\060\001\008\001\009\001\010\001\
\002\001\101\000\058\001\059\001\060\001\002\001\061\001\063\001\
\064\001\006\001\025\001\013\001\099\000\031\001\001\001\102\000\
\013\001\003\001\014\001\015\001\016\001\017\001\004\001\005\001\
\124\000\025\001\060\001\009\001\010\001\129\000\130\000\042\001\
\043\001\044\001\045\001\046\001\011\001\048\001\001\001\001\001\
\061\001\141\000\006\001\025\001\055\001\013\001\025\001\035\001\
\001\001\136\000\007\001\062\001\002\001\140\000\036\001\037\001\
\006\001\144\000\040\001\041\001\025\001\011\001\012\001\013\001\
\151\000\004\001\005\001\049\001\002\001\002\001\009\001\010\001\
\001\001\011\001\002\001\025\001\058\001\059\001\060\001\011\001\
\006\001\063\001\064\001\002\001\025\001\002\001\025\001\006\001\
\025\001\038\000\055\000\005\001\011\001\012\001\013\001\009\001\
\010\001\036\001\037\001\147\000\147\000\040\001\041\001\008\001\
\009\001\010\001\025\001\255\255\027\001\028\001\049\001\025\001\
\255\255\255\255\033\001\034\001\255\255\255\255\255\255\058\001\
\059\001\060\001\036\001\037\001\063\001\064\001\040\001\041\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\049\001\
\255\255\042\001\043\001\044\001\045\001\046\001\255\255\255\255\
\058\001\059\001\060\001\255\255\255\255\063\001\064\001\002\001\
\255\255\255\255\255\255\006\001\255\255\062\001\255\255\255\255\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\025\001\255\255\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\002\001\255\255\255\255\255\255\006\001\255\255\255\255\255\255\
\255\255\011\001\012\001\013\001\014\001\015\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\025\001\
\255\255\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\002\001\255\255\255\255\255\255\006\001\255\255\255\255\
\255\255\255\255\011\001\012\001\013\001\014\001\015\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\025\001\255\255\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\034\001\002\001\255\255\255\255\255\255\006\001\255\255\
\255\255\255\255\255\255\011\001\012\001\013\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\025\001\255\255\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\002\001\255\255\255\255\255\255\006\001\
\255\255\255\255\255\255\255\255\011\001\012\001\013\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\025\001\255\255\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\002\001\255\255\255\255\255\255\
\006\001\255\255\255\255\255\255\255\255\011\001\012\001\013\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\025\001\255\255\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\002\001\255\255\255\255\
\255\255\006\001\255\255\255\255\255\255\255\255\011\001\012\001\
\013\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\002\001\255\255\025\001\255\255\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\014\001\015\001\
\016\001\017\001\255\255\255\255\255\255\255\255\255\255\002\001\
\255\255\255\255\255\255\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\014\001\015\001\016\001\017\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\002\001\255\255\255\255\255\255\006\001\255\255\255\255\255\255\
\255\255\011\001\012\001\013\001\255\255\255\255\255\255\255\255\
\255\255\255\255\002\001\255\255\255\255\255\255\006\001\025\001\
\255\255\027\001\028\001\011\001\012\001\013\001\255\255\033\001\
\034\001\255\255\006\001\255\255\255\255\255\255\255\255\255\255\
\255\255\025\001\014\001\015\001\016\001\017\001\255\255\255\255\
\011\001\033\001\034\001\014\001\015\001\016\001\017\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\255\255\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\011\001\255\255\255\255\014\001\015\001\016\001\017\001\255\255\
\011\001\255\255\255\255\014\001\015\001\016\001\017\001\255\255\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\011\001\255\255\255\255\014\001\015\001\016\001\017\001\255\255\
\255\255\012\001\255\255\014\001\015\001\016\001\017\001\255\255\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\012\001\255\255\014\001\015\001\016\001\017\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\014\001\
\015\001\016\001\017\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\025\001\255\255\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\014\001\015\001\016\001\017\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\025\001\
\255\255\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\014\001\015\001\016\001\017\001\255\255\255\255\255\255\
\255\255\014\001\015\001\016\001\017\001\255\255\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\014\001\015\001\016\001\
\017\001\014\001\015\001\016\001\017\001\255\255\255\255\255\255\
\255\255\255\255\027\001\028\001\029\001\030\001\031\001\032\001\
\029\001\030\001\031\001\032\001"

let yynames_const = "\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  LSQUARE\000\
  RSQUARE\000\
  SERIESADD\000\
  SERIES\000\
  CARD\000\
  PLAYER\000\
  COLON\000\
  SEMI\000\
  COMMA\000\
  PLUS\000\
  MINUS\000\
  MULT\000\
  DIVIDE\000\
  ASSIGN\000\
  MOD\000\
  POWER\000\
  FLOOR\000\
  DOT\000\
  DOTDOT\000\
  DOTDOTDOT\000\
  NEWLINE\000\
  NOT\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  AND\000\
  OR\000\
  IN\000\
  RETURN\000\
  IF\000\
  ELIF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  INT\000\
  BOOL\000\
  FLOAT\000\
  NONE\000\
  STRING\000\
  RANGE\000\
  WHEN\000\
  DO\000\
  EXTERNAL\000\
  LET\000\
  BE\000\
  WITH\000\
  PASS\000\
  MAIN\000\
  TIMES\000\
  CONST\000\
  EOF\000\
  "

let yynames_block = "\
  ILIT\000\
  BLIT\000\
  ID\000\
  ACTIONID\000\
  CLASSID\000\
  FLIT\000\
  SLIT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'main_decl) in
    Obj.repr(
# 40 "parse.mly"
                        ( (fst _1, snd _1, _2) )
# 519 "parse.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'params_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_block) in
    Obj.repr(
# 44 "parse.mly"
    ({ 
      entitytyp = None;
      entityid = "";
      aname = _3;
      aparams = _5;
      abody = _8 })
# 533 "parse.ml"
               : 'action_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 52 "parse.mly"
                     ( ([], []) )
# 539 "parse.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'global_decl) in
    Obj.repr(
# 53 "parse.mly"
                         ( (List.rev (_2::fst _1), snd _1) )
# 547 "parse.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'action_decl) in
    Obj.repr(
# 54 "parse.mly"
                         ( (fst _1, List.rev (_2::snd _1)) )
# 555 "parse.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 57 "parse.mly"
                   ( (_1, _2) )
# 563 "parse.ml"
               : 'global_decl))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_block) in
    Obj.repr(
# 60 "parse.mly"
                            ( _3 )
# 570 "parse.ml"
               : 'main_decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'params_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'class_block) in
    Obj.repr(
# 64 "parse.mly"
    ({
      cname = _2;
      cparams = _4; 
      actions = fst _8;
      attributes = snd _8 })
# 583 "parse.ml"
               : 'class_decl))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'class_decl_list) in
    Obj.repr(
# 76 "parse.mly"
                                                          ( _4 )
# 590 "parse.ml"
               : 'class_block))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'action_decl) in
    Obj.repr(
# 79 "parse.mly"
                                    ( ([_1], []) )
# 597 "parse.ml"
               : 'class_decl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'attr_decl) in
    Obj.repr(
# 80 "parse.mly"
                                    ( ([], [_1]) )
# 604 "parse.ml"
               : 'class_decl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'class_decl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'action_decl) in
    Obj.repr(
# 81 "parse.mly"
                                    ( (List.rev (_2::fst _1), snd _1) )
# 612 "parse.ml"
               : 'class_decl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'class_decl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'attr_decl) in
    Obj.repr(
# 82 "parse.mly"
                                    ( (fst _1, List.rev (_2::snd _1)) )
# 620 "parse.ml"
               : 'class_decl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 84 "parse.mly"
                                ( OneAdecl(_1, _2, _4))
# 629 "parse.ml"
               : 'attr_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'param) in
    Obj.repr(
# 86 "parse.mly"
                                 ( [_1] )
# 636 "parse.ml"
               : 'params_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'params_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'param) in
    Obj.repr(
# 87 "parse.mly"
                                   ( _3::_1 )
# 644 "parse.ml"
               : 'params_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 90 "parse.mly"
                                   ( _1, _2 )
# 652 "parse.ml"
               : 'param))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'stmt_list) in
    Obj.repr(
# 93 "parse.mly"
                                                                 ( Block(List.rev _4) )
# 659 "parse.ml"
               : 'stmt_block))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 96 "parse.mly"
                                          ( [_1] )
# 666 "parse.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 97 "parse.mly"
                                             ( _2 :: _1 )
# 674 "parse.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_block) in
    Obj.repr(
# 100 "parse.mly"
                                            ( _1 )
# 681 "parse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 101 "parse.mly"
                                            ( Expr _1 )
# 688 "parse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_opt) in
    Obj.repr(
# 103 "parse.mly"
                                            ( Return _2 )
# 695 "parse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'if_stmt) in
    Obj.repr(
# 104 "parse.mly"
                                            ( _1 )
# 702 "parse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 7 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _10 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_block) in
    Obj.repr(
# 105 "parse.mly"
                                                                   ( For(_3, _5, _7, _10)   )
# 712 "parse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_block) in
    Obj.repr(
# 106 "parse.mly"
                                            ( ForLit(_2, _4, _6) )
# 721 "parse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_block) in
    Obj.repr(
# 107 "parse.mly"
                                           ( While(_2, _4) )
# 729 "parse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 108 "parse.mly"
                                            ( SeriesAdd(_1, _5))
# 737 "parse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_block) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'elif_stmt) in
    Obj.repr(
# 110 "parse.mly"
                                                ( If(_2, _4, _5) )
# 746 "parse.ml"
               : 'if_stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_block) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'else_block_opt) in
    Obj.repr(
# 111 "parse.mly"
                                                ( If(_2, _4, _5) )
# 755 "parse.ml"
               : 'if_stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_block) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'elif_stmt) in
    Obj.repr(
# 114 "parse.mly"
                                                    ( If(_2, _4, _5) )
# 764 "parse.ml"
               : 'elif_stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_block) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'else_block_opt) in
    Obj.repr(
# 115 "parse.mly"
                                                    ( If(_2, _4, _5) )
# 773 "parse.ml"
               : 'elif_stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 118 "parse.mly"
                         ( Block([]) )
# 779 "parse.ml"
               : 'else_block_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'else_block) in
    Obj.repr(
# 119 "parse.mly"
                         ( _1 )
# 786 "parse.ml"
               : 'else_block_opt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_block) in
    Obj.repr(
# 122 "parse.mly"
                                ( _3 )
# 793 "parse.ml"
               : 'else_block))
; (fun __caml_parser_env ->
    Obj.repr(
# 125 "parse.mly"
                                                    ( Int       )
# 799 "parse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 126 "parse.mly"
                                                    ( Bool      )
# 805 "parse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 127 "parse.mly"
                                                    ( Float     )
# 811 "parse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 128 "parse.mly"
                                                    ( String    )
# 817 "parse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 129 "parse.mly"
                                                    ( None      )
# 823 "parse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 130 "parse.mly"
                                                    ( Series(_3))
# 830 "parse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 131 "parse.mly"
                                                    ( ClassID )
# 837 "parse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 132 "parse.mly"
                                                    ( Player )
# 843 "parse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 133 "parse.mly"
                                                    ( Card )
# 849 "parse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'call_action) in
    Obj.repr(
# 136 "parse.mly"
                                     ( _1 )
# 856 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 137 "parse.mly"
                                     ( Iliteral(_1) )
# 863 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 138 "parse.mly"
                                     ( Fliteral(_1) )
# 870 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 139 "parse.mly"
                                     ( Bliteral(_1) )
# 877 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 140 "parse.mly"
                                     ( Sliteral(_1) )
# 884 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'args_list_opt) in
    Obj.repr(
# 141 "parse.mly"
                                     ( Seriesliteral(_2) )
# 891 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 142 "parse.mly"
                                     ( SeriesGet(_1, _3) )
# 899 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 143 "parse.mly"
                                     ( Id(_1) )
# 906 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 144 "parse.mly"
                                     ( Assign(_1, _3) )
# 914 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 145 "parse.mly"
                                     ( Binop(_1, Add,     _3) )
# 922 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 146 "parse.mly"
                                     ( Binop(_1, Sub,     _3) )
# 930 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 147 "parse.mly"
                                     ( Binop(_1, Mult,    _3) )
# 938 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 148 "parse.mly"
                                     ( Binop(_1, Div,     _3) )
# 946 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 149 "parse.mly"
                                     ( Binop(_1, And,     _3) )
# 954 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 150 "parse.mly"
                                     ( Binop(_1, Or,      _3) )
# 962 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 151 "parse.mly"
                                     ( Binop(_1, Equal,   _3) )
# 970 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 152 "parse.mly"
                                     ( Binop(_1, Neq,   _3) )
# 978 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 153 "parse.mly"
                                     ( Binop(_1, Less,    _3) )
# 986 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 154 "parse.mly"
                                     ( Binop(_1, Leq,     _3) )
# 994 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 155 "parse.mly"
                                     ( Binop(_1, Greater, _3) )
# 1002 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 156 "parse.mly"
                                     ( Binop(_1, Geq,     _3) )
# 1010 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'call_class) in
    Obj.repr(
# 157 "parse.mly"
                                   ( _1 )
# 1017 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 160 "parse.mly"
                                  ( [] )
# 1023 "parse.ml"
               : 'args_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'args_list) in
    Obj.repr(
# 161 "parse.mly"
                                  ( List.rev _1 )
# 1030 "parse.ml"
               : 'args_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 164 "parse.mly"
                                    ( [_1] )
# 1037 "parse.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'args_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 165 "parse.mly"
                                    ( _3 :: _1 )
# 1045 "parse.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'args_list_opt) in
    Obj.repr(
# 168 "parse.mly"
                                                     ( ActionCall(_2, _4) )
# 1053 "parse.ml"
               : 'call_action))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args_list_opt) in
    Obj.repr(
# 172 "parse.mly"
                                                    ( PlayerClassCall(_3) )
# 1060 "parse.ml"
               : 'call_class))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args_list_opt) in
    Obj.repr(
# 173 "parse.mly"
                                                  ( CClassCall(_3) )
# 1067 "parse.ml"
               : 'call_class))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 176 "parse.mly"
                   ( AttrCall(_1, _3) )
# 1075 "parse.ml"
               : 'call_attr))
; (fun __caml_parser_env ->
    Obj.repr(
# 179 "parse.mly"
                       ( Noexpr )
# 1081 "parse.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 180 "parse.mly"
                       ( _1 )
# 1088 "parse.ml"
               : 'expr_opt))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
