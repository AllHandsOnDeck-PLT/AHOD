type token =
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | LSQUARE
  | RSQUARE
  | SERIESSIZE
  | SERIESPUSH
  | SERIESPOP
  | SERIES
  | CARD
  | PLAYER
  | COLON
  | SEMI
  | COMMA
  | PLUS
  | MINUS
  | MULT
  | DIVIDE
  | ASSIGN
  | FLOOR
  | DOT
  | NEWLINE
  | NOT
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | AND
  | OR
  | RETURN
  | IF
  | ELIF
  | ELSE
  | FOR
  | WHILE
  | INT
  | BOOL
  | FLOAT
  | VOID
  | STRING
  | RANGE
  | WHEN
  | DO
  | LET
  | BE
  | WITH
  | MAIN
  | PRINT
  | TIMES
  | CONST
  | CEND
  | ILIT of (int)
  | BLIT of (bool)
  | ID of (string)
  | ACTIONID of (string)
  | FLIT of (string)
  | SLIT of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "parse.mly"
open Ast
# 69 "parse.ml"
let yytransl_const = [|
  257 (* LPAREN *);
  258 (* RPAREN *);
  259 (* LBRACE *);
  260 (* RBRACE *);
  261 (* LSQUARE *);
  262 (* RSQUARE *);
  263 (* SERIESSIZE *);
  264 (* SERIESPUSH *);
  265 (* SERIESPOP *);
  266 (* SERIES *);
  267 (* CARD *);
  268 (* PLAYER *);
  269 (* COLON *);
  270 (* SEMI *);
  271 (* COMMA *);
  272 (* PLUS *);
  273 (* MINUS *);
  274 (* MULT *);
  275 (* DIVIDE *);
  276 (* ASSIGN *);
  277 (* FLOOR *);
  278 (* DOT *);
  279 (* NEWLINE *);
  280 (* NOT *);
  281 (* EQ *);
  282 (* NEQ *);
  283 (* LT *);
  284 (* LEQ *);
  285 (* GT *);
  286 (* GEQ *);
  287 (* AND *);
  288 (* OR *);
  289 (* RETURN *);
  290 (* IF *);
  291 (* ELIF *);
  292 (* ELSE *);
  293 (* FOR *);
  294 (* WHILE *);
  295 (* INT *);
  296 (* BOOL *);
  297 (* FLOAT *);
  298 (* VOID *);
  299 (* STRING *);
  300 (* RANGE *);
  301 (* WHEN *);
  302 (* DO *);
  303 (* LET *);
  304 (* BE *);
  305 (* WITH *);
  306 (* MAIN *);
  307 (* PRINT *);
  308 (* TIMES *);
  309 (* CONST *);
  310 (* CEND *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  311 (* ILIT *);
  312 (* BLIT *);
  313 (* ID *);
  314 (* ACTIONID *);
  315 (* FLIT *);
  316 (* SLIT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\006\000\006\000\004\000\003\000\
\005\000\010\000\010\000\011\000\011\000\012\000\013\000\008\000\
\008\000\009\000\009\000\014\000\014\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\018\000\018\000\019\000\019\000\
\020\000\020\000\021\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\016\000\016\000\016\000\016\000\016\000\
\016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
\016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
\016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
\022\000\022\000\027\000\027\000\023\000\025\000\024\000\024\000\
\026\000\017\000\017\000\000\000"

let yylen = "\002\000\
\003\000\000\000\002\000\002\000\000\000\001\000\004\000\012\000\
\018\000\001\000\000\000\001\000\003\000\002\000\008\000\000\000\
\002\000\000\000\001\000\001\000\002\000\001\000\003\000\003\000\
\001\000\011\000\005\000\008\000\006\000\006\000\006\000\006\000\
\000\000\001\000\004\000\001\000\001\000\001\000\001\000\001\000\
\004\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\003\000\003\000\004\000\005\000\005\000\001\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\002\000\002\000\001\000\001\000\001\000\001\000\
\000\000\001\000\001\000\003\000\005\000\005\000\004\000\004\000\
\003\000\000\000\001\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\084\000\000\000\000\000\043\000\042\000\036\000\
\037\000\038\000\040\000\039\000\000\000\000\000\000\000\003\000\
\004\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\
\000\000\006\000\000\000\000\000\041\000\000\000\000\000\007\000\
\000\000\000\000\000\000\000\000\000\000\012\000\000\000\014\000\
\000\000\000\000\016\000\000\000\013\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\054\000\044\000\046\000\000\000\045\000\047\000\
\017\000\000\000\022\000\000\000\020\000\000\000\025\000\069\000\
\070\000\071\000\072\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\067\000\000\000\068\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\021\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\050\000\000\000\000\000\000\000\000\000\024\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\081\000\000\000\000\000\000\000\057\000\058\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\023\000\000\000\000\000\080\000\079\000\000\000\000\000\000\000\
\000\000\000\000\000\000\051\000\000\000\000\000\000\000\008\000\
\016\000\000\000\000\000\000\000\027\000\077\000\078\000\052\000\
\000\000\053\000\000\000\000\000\000\000\000\000\029\000\030\000\
\034\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\015\000\000\000\000\000\000\000\028\000\000\000\
\000\000\035\000\000\000\009\000\000\000\000\000\031\000\032\000\
\026\000"

let yydgoto = "\002\000\
\003\000\004\000\015\000\065\000\017\000\027\000\018\000\046\000\
\066\000\036\000\037\000\038\000\067\000\068\000\069\000\070\000\
\089\000\071\000\175\000\176\000\177\000\081\000\072\000\073\000\
\074\000\075\000\082\000"

let yysindex = "\033\000\
\000\000\000\000\000\000\203\255\231\254\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\246\254\044\255\067\000\000\000\
\000\000\016\255\225\255\225\255\022\255\000\000\022\255\051\255\
\023\255\000\000\060\255\071\255\000\000\092\255\110\255\000\000\
\225\255\022\255\064\255\125\255\113\255\000\000\114\255\000\000\
\123\255\225\255\000\000\022\255\000\000\217\255\127\255\029\000\
\150\255\151\255\029\000\152\255\029\000\029\000\029\000\153\255\
\029\000\213\254\000\000\000\000\000\000\094\255\000\000\000\000\
\000\000\154\255\000\000\014\000\000\000\074\001\000\000\000\000\
\000\000\000\000\000\000\158\255\150\255\151\255\118\255\007\002\
\156\255\142\255\029\000\029\000\000\000\022\255\000\000\007\002\
\141\255\168\001\029\000\188\001\165\255\166\255\029\000\029\000\
\252\254\022\255\000\000\029\000\029\000\029\000\029\000\029\000\
\029\000\029\000\029\000\029\000\029\000\029\000\029\000\148\255\
\022\255\063\255\000\000\029\000\171\255\175\255\157\255\000\000\
\022\255\227\001\022\255\029\000\029\000\148\001\007\002\183\255\
\184\255\185\255\000\000\160\255\250\254\250\254\000\000\000\000\
\076\000\076\000\070\255\070\255\070\255\070\255\140\000\024\002\
\000\000\169\255\007\002\000\000\000\000\014\000\170\255\029\000\
\170\255\092\001\192\255\000\000\193\255\029\000\194\255\000\000\
\000\000\005\255\010\255\246\001\000\000\000\000\000\000\000\000\
\113\001\000\000\217\255\022\255\029\000\187\255\000\000\000\000\
\000\000\029\000\022\255\199\255\181\255\208\001\022\255\131\001\
\186\255\022\255\000\000\022\255\170\255\198\255\000\000\202\255\
\170\255\000\000\022\255\000\000\010\255\170\255\000\000\000\000\
\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\208\255\000\000\208\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\204\255\208\255\000\000\000\000\210\255\000\000\000\000\000\000\
\000\000\000\000\000\000\208\255\000\000\201\255\000\000\211\255\
\159\255\190\255\000\000\000\000\000\000\209\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\053\001\000\000\000\000\
\000\000\000\000\000\000\222\255\000\000\208\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\116\255\018\255\
\000\000\072\255\231\255\231\255\000\000\208\255\000\000\215\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\208\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\208\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\208\255\000\000\208\255\000\000\231\255\000\000\017\255\000\000\
\000\000\000\000\000\000\000\000\085\000\117\000\000\000\000\000\
\021\001\035\001\149\000\181\000\213\000\245\000\176\255\012\255\
\000\000\000\000\035\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\164\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\201\255\208\255\000\000\000\000\000\000\000\000\
\000\000\000\000\208\255\000\000\000\000\000\000\208\255\000\000\
\000\000\208\255\000\000\208\255\000\000\000\000\000\000\000\000\
\000\000\000\000\208\255\000\000\164\255\000\000\000\000\000\000\
\000\000"

let yygindex = "\000\000\
\000\000\000\000\000\000\235\000\000\000\233\255\049\000\088\000\
\081\000\000\000\000\000\219\000\182\255\112\000\189\255\001\000\
\000\000\000\000\072\000\073\000\000\000\179\255\000\000\000\000\
\000\000\000\000\000\000"

let yytablesize = 823
let yytable = "\028\000\
\099\000\019\000\128\000\129\000\130\000\117\000\118\000\093\000\
\172\000\048\000\039\000\102\000\103\000\060\000\094\000\077\000\
\078\000\060\000\049\000\075\000\047\000\051\000\049\000\075\000\
\060\000\060\000\060\000\052\000\053\000\049\000\049\000\049\000\
\075\000\001\000\060\000\020\000\076\000\054\000\055\000\049\000\
\076\000\056\000\057\000\060\000\173\000\174\000\112\000\155\000\
\080\000\076\000\058\000\085\000\131\000\087\000\088\000\090\000\
\021\000\092\000\059\000\060\000\061\000\062\000\119\000\063\000\
\064\000\060\000\022\000\024\000\025\000\128\000\049\000\130\000\
\023\000\074\000\132\000\026\000\163\000\074\000\165\000\029\000\
\030\000\035\000\031\000\080\000\080\000\100\000\101\000\102\000\
\103\000\146\000\035\000\122\000\033\000\032\000\099\000\126\000\
\127\000\151\000\095\000\153\000\133\000\134\000\135\000\136\000\
\137\000\138\000\139\000\140\000\141\000\142\000\143\000\144\000\
\034\000\096\000\194\000\097\000\147\000\048\000\197\000\131\000\
\040\000\048\000\095\000\201\000\154\000\080\000\041\000\042\000\
\048\000\048\000\048\000\048\000\048\000\048\000\048\000\044\000\
\043\000\096\000\048\000\114\000\048\000\048\000\048\000\048\000\
\048\000\048\000\048\000\048\000\181\000\076\000\083\000\084\000\
\164\000\091\000\086\000\185\000\116\000\098\000\169\000\189\000\
\113\000\115\000\192\000\120\000\193\000\124\000\125\000\033\000\
\033\000\048\000\145\000\198\000\148\000\182\000\033\000\033\000\
\149\000\059\000\184\000\150\000\033\000\059\000\160\000\157\000\
\158\000\159\000\033\000\033\000\059\000\059\000\059\000\161\000\
\052\000\167\000\168\000\170\000\033\000\033\000\059\000\183\000\
\033\000\033\000\186\000\187\000\018\000\011\000\059\000\059\000\
\191\000\033\000\195\000\010\000\005\000\006\000\007\000\043\000\
\073\000\033\000\033\000\033\000\033\000\048\000\033\000\033\000\
\196\000\019\000\005\000\049\000\050\000\059\000\005\000\082\000\
\073\000\051\000\005\000\006\000\007\000\083\000\016\000\052\000\
\053\000\008\000\009\000\010\000\011\000\012\000\042\000\013\000\
\171\000\054\000\055\000\180\000\014\000\056\000\057\000\008\000\
\009\000\010\000\011\000\012\000\045\000\162\000\058\000\008\000\
\009\000\010\000\011\000\012\000\199\000\200\000\059\000\060\000\
\061\000\062\000\048\000\063\000\064\000\000\000\000\000\000\000\
\077\000\078\000\000\000\000\000\000\000\000\000\051\000\000\000\
\000\000\048\000\000\000\000\000\052\000\053\000\000\000\077\000\
\078\000\000\000\000\000\000\000\000\000\051\000\054\000\055\000\
\000\000\000\000\056\000\057\000\053\000\000\000\000\000\000\000\
\000\000\000\000\000\000\058\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\059\000\060\000\061\000\062\000\000\000\
\063\000\064\000\058\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\059\000\060\000\061\000\079\000\055\000\063\000\
\064\000\000\000\055\000\100\000\101\000\102\000\103\000\000\000\
\000\000\055\000\055\000\055\000\055\000\055\000\106\000\107\000\
\108\000\109\000\000\000\055\000\000\000\055\000\055\000\055\000\
\055\000\055\000\055\000\055\000\055\000\000\000\056\000\000\000\
\000\000\000\000\056\000\000\000\000\000\000\000\000\000\000\000\
\000\000\056\000\056\000\056\000\056\000\056\000\000\000\000\000\
\000\000\000\000\055\000\056\000\000\000\056\000\056\000\056\000\
\056\000\056\000\056\000\056\000\056\000\000\000\063\000\000\000\
\000\000\000\000\063\000\100\000\101\000\102\000\103\000\000\000\
\000\000\063\000\063\000\063\000\104\000\105\000\106\000\107\000\
\108\000\109\000\056\000\063\000\000\000\063\000\063\000\063\000\
\063\000\063\000\063\000\063\000\063\000\000\000\064\000\000\000\
\000\000\000\000\064\000\000\000\000\000\000\000\000\000\000\000\
\000\000\064\000\064\000\064\000\000\000\000\000\000\000\000\000\
\000\000\000\000\063\000\064\000\000\000\064\000\064\000\064\000\
\064\000\064\000\064\000\064\000\064\000\000\000\065\000\000\000\
\000\000\000\000\065\000\000\000\000\000\000\000\000\000\000\000\
\000\000\065\000\065\000\065\000\000\000\000\000\000\000\000\000\
\000\000\000\000\064\000\065\000\000\000\065\000\065\000\065\000\
\065\000\065\000\065\000\065\000\065\000\000\000\066\000\000\000\
\000\000\000\000\066\000\000\000\000\000\000\000\000\000\000\000\
\000\000\066\000\066\000\066\000\000\000\000\000\000\000\000\000\
\000\000\000\000\065\000\066\000\000\000\066\000\066\000\066\000\
\066\000\066\000\066\000\066\000\066\000\000\000\061\000\000\000\
\000\000\000\000\061\000\000\000\000\000\000\000\000\000\000\000\
\000\000\061\000\061\000\061\000\062\000\000\000\000\000\000\000\
\062\000\000\000\066\000\061\000\000\000\061\000\061\000\062\000\
\062\000\062\000\000\000\061\000\061\000\000\000\000\000\000\000\
\000\000\062\000\000\000\062\000\062\000\000\000\000\000\000\000\
\000\000\062\000\062\000\000\000\048\000\048\000\048\000\048\000\
\000\000\000\000\061\000\048\000\000\000\048\000\048\000\048\000\
\048\000\048\000\048\000\048\000\048\000\000\000\000\000\000\000\
\062\000\100\000\101\000\102\000\103\000\166\000\000\000\000\000\
\000\000\000\000\104\000\105\000\106\000\107\000\108\000\109\000\
\110\000\111\000\048\000\100\000\101\000\102\000\103\000\000\000\
\000\000\000\000\179\000\000\000\104\000\105\000\106\000\107\000\
\108\000\109\000\110\000\111\000\000\000\000\000\000\000\026\000\
\100\000\101\000\102\000\103\000\190\000\000\000\000\000\000\000\
\000\000\104\000\105\000\106\000\107\000\108\000\109\000\110\000\
\111\000\000\000\100\000\101\000\102\000\103\000\000\000\000\000\
\000\000\156\000\000\000\104\000\105\000\106\000\107\000\108\000\
\109\000\110\000\111\000\100\000\101\000\102\000\103\000\000\000\
\000\000\000\000\000\000\000\000\104\000\105\000\106\000\107\000\
\108\000\109\000\110\000\111\000\121\000\000\000\000\000\100\000\
\101\000\102\000\103\000\000\000\000\000\000\000\000\000\000\000\
\104\000\105\000\106\000\107\000\108\000\109\000\110\000\111\000\
\123\000\000\000\000\000\100\000\101\000\102\000\103\000\000\000\
\000\000\000\000\000\000\000\000\104\000\105\000\106\000\107\000\
\108\000\109\000\110\000\111\000\188\000\000\000\000\000\100\000\
\101\000\102\000\103\000\000\000\000\000\000\000\000\000\000\000\
\104\000\105\000\106\000\107\000\108\000\109\000\110\000\111\000\
\152\000\000\000\100\000\101\000\102\000\103\000\000\000\000\000\
\000\000\000\000\000\000\104\000\105\000\106\000\107\000\108\000\
\109\000\110\000\111\000\178\000\000\000\100\000\101\000\102\000\
\103\000\000\000\000\000\000\000\000\000\000\000\104\000\105\000\
\106\000\107\000\108\000\109\000\110\000\111\000\100\000\101\000\
\102\000\103\000\000\000\000\000\000\000\000\000\000\000\104\000\
\105\000\106\000\107\000\108\000\109\000\110\000\111\000\100\000\
\101\000\102\000\103\000\000\000\000\000\000\000\000\000\000\000\
\104\000\105\000\106\000\107\000\108\000\109\000\110\000"

let yycheck = "\023\000\
\068\000\027\001\007\001\008\001\009\001\083\000\084\000\051\001\
\004\001\005\001\034\000\018\001\019\001\002\001\058\001\011\001\
\012\001\006\001\002\001\002\001\044\000\017\001\006\001\006\001\
\013\001\014\001\015\001\023\001\024\001\013\001\014\001\015\001\
\015\001\001\000\023\001\046\001\002\001\033\001\034\001\023\001\
\006\001\037\001\038\001\032\001\035\001\036\001\070\000\125\000\
\048\000\015\001\046\001\051\000\057\001\053\000\054\000\055\000\
\013\001\057\000\054\001\055\001\056\001\057\001\086\000\059\001\
\060\001\054\001\000\000\019\000\020\000\007\001\054\001\009\001\
\057\001\002\001\098\000\054\001\151\000\006\001\153\000\029\001\
\058\001\033\000\023\001\083\000\084\000\016\001\017\001\018\001\
\019\001\113\000\042\000\091\000\001\001\023\001\162\000\095\000\
\096\000\121\000\005\001\123\000\100\000\101\000\102\000\103\000\
\104\000\105\000\106\000\107\000\108\000\109\000\110\000\111\000\
\003\001\020\001\189\000\022\001\116\000\002\001\193\000\057\001\
\057\001\006\001\005\001\198\000\124\000\125\000\002\001\015\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\013\001\
\023\001\020\001\023\001\022\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\172\000\023\001\001\001\001\001\
\152\000\001\001\003\001\179\000\015\001\004\001\158\000\183\000\
\003\001\006\001\186\000\023\001\188\000\001\001\001\001\004\001\
\005\001\054\001\023\001\195\000\002\001\173\000\011\001\012\001\
\002\001\002\001\178\000\023\001\017\001\006\001\023\001\001\001\
\001\001\001\001\023\001\024\001\013\001\014\001\015\001\023\001\
\023\001\002\001\002\001\002\001\033\001\034\001\023\001\013\001\
\037\001\038\001\004\001\023\001\004\001\002\001\031\001\032\001\
\023\001\046\001\013\001\002\001\010\001\011\001\012\001\057\001\
\006\001\054\001\055\001\056\001\057\001\005\001\059\001\060\001\
\023\001\004\001\010\001\011\001\012\001\054\001\023\001\023\001\
\002\001\017\001\010\001\011\001\012\001\023\001\004\000\023\001\
\024\001\039\001\040\001\041\001\042\001\043\001\057\001\045\001\
\161\000\033\001\034\001\171\000\050\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\042\000\150\000\046\001\039\001\
\040\001\041\001\042\001\043\001\197\000\197\000\054\001\055\001\
\056\001\057\001\005\001\059\001\060\001\255\255\255\255\255\255\
\011\001\012\001\255\255\255\255\255\255\255\255\017\001\255\255\
\255\255\005\001\255\255\255\255\023\001\024\001\255\255\011\001\
\012\001\255\255\255\255\255\255\255\255\017\001\033\001\034\001\
\255\255\255\255\037\001\038\001\024\001\255\255\255\255\255\255\
\255\255\255\255\255\255\046\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\054\001\055\001\056\001\057\001\255\255\
\059\001\060\001\046\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\054\001\055\001\056\001\057\001\002\001\059\001\
\060\001\255\255\006\001\016\001\017\001\018\001\019\001\255\255\
\255\255\013\001\014\001\015\001\016\001\017\001\027\001\028\001\
\029\001\030\001\255\255\023\001\255\255\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\255\255\002\001\255\255\
\255\255\255\255\006\001\255\255\255\255\255\255\255\255\255\255\
\255\255\013\001\014\001\015\001\016\001\017\001\255\255\255\255\
\255\255\255\255\054\001\023\001\255\255\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\255\255\002\001\255\255\
\255\255\255\255\006\001\016\001\017\001\018\001\019\001\255\255\
\255\255\013\001\014\001\015\001\025\001\026\001\027\001\028\001\
\029\001\030\001\054\001\023\001\255\255\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\255\255\002\001\255\255\
\255\255\255\255\006\001\255\255\255\255\255\255\255\255\255\255\
\255\255\013\001\014\001\015\001\255\255\255\255\255\255\255\255\
\255\255\255\255\054\001\023\001\255\255\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\255\255\002\001\255\255\
\255\255\255\255\006\001\255\255\255\255\255\255\255\255\255\255\
\255\255\013\001\014\001\015\001\255\255\255\255\255\255\255\255\
\255\255\255\255\054\001\023\001\255\255\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\255\255\002\001\255\255\
\255\255\255\255\006\001\255\255\255\255\255\255\255\255\255\255\
\255\255\013\001\014\001\015\001\255\255\255\255\255\255\255\255\
\255\255\255\255\054\001\023\001\255\255\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\255\255\002\001\255\255\
\255\255\255\255\006\001\255\255\255\255\255\255\255\255\255\255\
\255\255\013\001\014\001\015\001\002\001\255\255\255\255\255\255\
\006\001\255\255\054\001\023\001\255\255\025\001\026\001\013\001\
\014\001\015\001\255\255\031\001\032\001\255\255\255\255\255\255\
\255\255\023\001\255\255\025\001\026\001\255\255\255\255\255\255\
\255\255\031\001\032\001\255\255\016\001\017\001\018\001\019\001\
\255\255\255\255\054\001\023\001\255\255\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\255\255\255\255\255\255\
\054\001\016\001\017\001\018\001\019\001\002\001\255\255\255\255\
\255\255\255\255\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\054\001\016\001\017\001\018\001\019\001\255\255\
\255\255\255\255\002\001\255\255\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\255\255\255\255\255\255\054\001\
\016\001\017\001\018\001\019\001\002\001\255\255\255\255\255\255\
\255\255\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\255\255\016\001\017\001\018\001\019\001\255\255\255\255\
\255\255\006\001\255\255\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\016\001\017\001\018\001\019\001\255\255\
\255\255\255\255\255\255\255\255\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\013\001\255\255\255\255\016\001\
\017\001\018\001\019\001\255\255\255\255\255\255\255\255\255\255\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\013\001\255\255\255\255\016\001\017\001\018\001\019\001\255\255\
\255\255\255\255\255\255\255\255\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\013\001\255\255\255\255\016\001\
\017\001\018\001\019\001\255\255\255\255\255\255\255\255\255\255\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\014\001\255\255\016\001\017\001\018\001\019\001\255\255\255\255\
\255\255\255\255\255\255\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\014\001\255\255\016\001\017\001\018\001\
\019\001\255\255\255\255\255\255\255\255\255\255\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\016\001\017\001\
\018\001\019\001\255\255\255\255\255\255\255\255\255\255\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\016\001\
\017\001\018\001\019\001\255\255\255\255\255\255\255\255\255\255\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001"

let yynames_const = "\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  LSQUARE\000\
  RSQUARE\000\
  SERIESSIZE\000\
  SERIESPUSH\000\
  SERIESPOP\000\
  SERIES\000\
  CARD\000\
  PLAYER\000\
  COLON\000\
  SEMI\000\
  COMMA\000\
  PLUS\000\
  MINUS\000\
  MULT\000\
  DIVIDE\000\
  ASSIGN\000\
  FLOOR\000\
  DOT\000\
  NEWLINE\000\
  NOT\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  AND\000\
  OR\000\
  RETURN\000\
  IF\000\
  ELIF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  INT\000\
  BOOL\000\
  FLOAT\000\
  VOID\000\
  STRING\000\
  RANGE\000\
  WHEN\000\
  DO\000\
  LET\000\
  BE\000\
  WITH\000\
  MAIN\000\
  PRINT\000\
  TIMES\000\
  CONST\000\
  CEND\000\
  EOF\000\
  "

let yynames_block = "\
  ILIT\000\
  BLIT\000\
  ID\000\
  ACTIONID\000\
  FLIT\000\
  SLIT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'main_decl) in
    Obj.repr(
# 32 "parse.mly"
                        ( (fst _1, snd _1, _2) )
# 545 "parse.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 35 "parse.mly"
                     ( ([], []) )
# 551 "parse.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'global_decl) in
    Obj.repr(
# 36 "parse.mly"
                         ( (List.rev (_2::fst _1), snd _1) )
# 559 "parse.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'action_decl) in
    Obj.repr(
# 37 "parse.mly"
                        ( (fst _1, List.rev (_2::snd _1)) )
# 567 "parse.ml"
               : 'decls))
; (fun __caml_parser_env ->
    Obj.repr(
# 40 "parse.mly"
                 ( Noexpr )
# 573 "parse.ml"
               : 'cend_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 41 "parse.mly"
                 ( Noexpr )
# 579 "parse.ml"
               : 'cend_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'cend_opt) in
    Obj.repr(
# 44 "parse.mly"
                            ( (_1, _2))
# 588 "parse.ml"
               : 'global_decl))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 9 : 'cend_opt) in
    let _6 = (Parsing.peek_val __caml_parser_env 6 : 'cend_opt) in
    let _8 = (Parsing.peek_val __caml_parser_env 4 : 'locals_list) in
    let _9 = (Parsing.peek_val __caml_parser_env 3 : 'stmt_wrap) in
    let _11 = (Parsing.peek_val __caml_parser_env 1 : 'cend_opt) in
    Obj.repr(
# 47 "parse.mly"
                                                                                                      ({ 
    mtyp = Void; 
    mparams = [];
    mlocals = _8;
    mbody = [_9] })
# 603 "parse.ml"
               : 'main_decl))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 15 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 14 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 12 : 'params_list_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 9 : 'cend_opt) in
    let _12 = (Parsing.peek_val __caml_parser_env 6 : 'cend_opt) in
    let _14 = (Parsing.peek_val __caml_parser_env 4 : 'locals_list) in
    let _15 = (Parsing.peek_val __caml_parser_env 3 : 'stmt_wrap) in
    let _17 = (Parsing.peek_val __caml_parser_env 1 : 'cend_opt) in
    Obj.repr(
# 55 "parse.mly"
    ({ 
      atyp = _3;
      aname = _4;
      aparams = List.rev _6; 
      alocals = List.rev _14;
      abody = [_15] })
# 622 "parse.ml"
               : 'action_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'params_list) in
    Obj.repr(
# 63 "parse.mly"
                    (_1)
# 629 "parse.ml"
               : 'params_list_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 64 "parse.mly"
                    ([])
# 635 "parse.ml"
               : 'params_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'param) in
    Obj.repr(
# 67 "parse.mly"
                                   ( [_1] )
# 642 "parse.ml"
               : 'params_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'params_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'param) in
    Obj.repr(
# 68 "parse.mly"
                                   ( _3::_1 )
# 650 "parse.ml"
               : 'params_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 71 "parse.mly"
                                   ( _1, _2 )
# 658 "parse.ml"
               : 'param))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'cend_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'stmt_list) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'cend_opt) in
    Obj.repr(
# 74 "parse.mly"
                                                                                   ( Block(List.rev _5) )
# 667 "parse.ml"
               : 'stmt_block))
; (fun __caml_parser_env ->
    Obj.repr(
# 77 "parse.mly"
                                           ([])
# 673 "parse.ml"
               : 'locals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'locals_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'global_decl) in
    Obj.repr(
# 78 "parse.mly"
                                           (_2 :: _1 )
# 681 "parse.ml"
               : 'locals_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 81 "parse.mly"
                                              (Block([]))
# 687 "parse.ml"
               : 'stmt_wrap))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_list) in
    Obj.repr(
# 82 "parse.mly"
                                              ( Block(List.rev _1) )
# 694 "parse.ml"
               : 'stmt_wrap))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 85 "parse.mly"
                                             ( [_1] )
# 701 "parse.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 86 "parse.mly"
                                             ( _2 :: _1 )
# 709 "parse.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_block) in
    Obj.repr(
# 89 "parse.mly"
                                                ( _1 )
# 716 "parse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'cend_opt) in
    Obj.repr(
# 90 "parse.mly"
                                             ( Expr _1)
# 724 "parse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_opt) in
    Obj.repr(
# 91 "parse.mly"
                                            ( Return _2)
# 731 "parse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'if_stmt) in
    Obj.repr(
# 92 "parse.mly"
                                            ( _1 )
# 738 "parse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 8 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : 'cend_opt) in
    let _11 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_block) in
    Obj.repr(
# 93 "parse.mly"
                                                                            ( For(_3, _5, _7, _11)   )
# 749 "parse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'cend_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_block) in
    Obj.repr(
# 95 "parse.mly"
                                                     ( While(_2, _5) )
# 758 "parse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'cend_opt) in
    Obj.repr(
# 96 "parse.mly"
                                                            ( SeriesPush(_1, _5))
# 767 "parse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'cend_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_block) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'elif_stmt) in
    Obj.repr(
# 99 "parse.mly"
                                                         ( If(_2, _5, _6) )
# 777 "parse.ml"
               : 'if_stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'cend_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_block) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'else_block_opt) in
    Obj.repr(
# 100 "parse.mly"
                                                         ( If(_2, _5, _6) )
# 787 "parse.ml"
               : 'if_stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'cend_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_block) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'elif_stmt) in
    Obj.repr(
# 103 "parse.mly"
                                                             ( If(_2, _5, _6) )
# 797 "parse.ml"
               : 'elif_stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'cend_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_block) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'else_block_opt) in
    Obj.repr(
# 104 "parse.mly"
                                                             ( If(_2, _5, _6) )
# 807 "parse.ml"
               : 'elif_stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 107 "parse.mly"
                         ( Block([]) )
# 813 "parse.ml"
               : 'else_block_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'else_block) in
    Obj.repr(
# 108 "parse.mly"
                         ( _1 )
# 820 "parse.ml"
               : 'else_block_opt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'cend_opt) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_block) in
    Obj.repr(
# 111 "parse.mly"
                                         ( _4 )
# 828 "parse.ml"
               : 'else_block))
; (fun __caml_parser_env ->
    Obj.repr(
# 114 "parse.mly"
                                                    ( Int       )
# 834 "parse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 115 "parse.mly"
                                                    ( Bool      )
# 840 "parse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 116 "parse.mly"
                                                    ( Float     )
# 846 "parse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 117 "parse.mly"
                                                    ( String    )
# 852 "parse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 118 "parse.mly"
                                                    ( Void      )
# 858 "parse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 119 "parse.mly"
                                                    ( Series(_3))
# 865 "parse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 120 "parse.mly"
                                                    ( Player )
# 871 "parse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 121 "parse.mly"
                                                    ( Card )
# 877 "parse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 124 "parse.mly"
                                     ( Iliteral(_1) )
# 884 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 125 "parse.mly"
                                     ( Fliteral(_1) )
# 891 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 126 "parse.mly"
                                     ( Bliteral(_1) )
# 898 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 127 "parse.mly"
                                     ( Sliteral(_1) )
# 905 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 128 "parse.mly"
                                     ( Id(_1) )
# 912 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 129 "parse.mly"
                                     ( Assign(_1, _3) )
# 920 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'args_list_opt) in
    Obj.repr(
# 130 "parse.mly"
                                     ( Seriesliteral(_2) )
# 927 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 131 "parse.mly"
                                     ( SeriesGet(_1, _3) )
# 935 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    Obj.repr(
# 132 "parse.mly"
                                      ( SeriesSize(_1))
# 942 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    Obj.repr(
# 133 "parse.mly"
                                     ( SeriesPop(_1))
# 949 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 135 "parse.mly"
                                     ( Noexpr )
# 955 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 136 "parse.mly"
                                     ( Binop(_1, Add,     _3) )
# 963 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 137 "parse.mly"
                                     ( Binop(_1, Sub,     _3) )
# 971 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 138 "parse.mly"
                                     ( Binop(_1, Mult,    _3) )
# 979 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 139 "parse.mly"
                                     ( Binop(_1, Div,     _3) )
# 987 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 140 "parse.mly"
                                     ( Binop(_1, And,     _3) )
# 995 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 141 "parse.mly"
                                     ( Binop(_1, Or,      _3) )
# 1003 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 142 "parse.mly"
                                     ( Binop(_1, Equal,   _3) )
# 1011 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 143 "parse.mly"
                                     ( Binop(_1, Neq,   _3)   )
# 1019 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 144 "parse.mly"
                                     ( Binop(_1, Less,    _3) )
# 1027 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 145 "parse.mly"
                                     ( Binop(_1, Leq,     _3) )
# 1035 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 146 "parse.mly"
                                     ( Binop(_1, Greater, _3) )
# 1043 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 147 "parse.mly"
                                     ( Binop(_1, Geq,     _3) )
# 1051 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 148 "parse.mly"
                                     ( Unop(Neg, _2)          )
# 1058 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 149 "parse.mly"
                                     ( Unop(Not, _2)          )
# 1065 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'call_print) in
    Obj.repr(
# 150 "parse.mly"
                                     ( _1 )
# 1072 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'call_class) in
    Obj.repr(
# 151 "parse.mly"
                                     ( _1 )
# 1079 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'call_action) in
    Obj.repr(
# 152 "parse.mly"
                                     ( _1 )
# 1086 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'call_attr) in
    Obj.repr(
# 153 "parse.mly"
                                     ( _1 )
# 1093 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 156 "parse.mly"
                                  ( [] )
# 1099 "parse.ml"
               : 'args_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'args_list) in
    Obj.repr(
# 157 "parse.mly"
                                  ( List.rev _1 )
# 1106 "parse.ml"
               : 'args_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 160 "parse.mly"
                                    ( [_1] )
# 1113 "parse.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'args_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 161 "parse.mly"
                                    ( _3 :: _1 )
# 1121 "parse.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 164 "parse.mly"
                                         ( PrintCall(_4) )
# 1128 "parse.ml"
               : 'call_print))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'args_list_opt) in
    Obj.repr(
# 167 "parse.mly"
                                                     ( ActionCall(_2, _4) )
# 1136 "parse.ml"
               : 'call_action))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args_list_opt) in
    Obj.repr(
# 170 "parse.mly"
                                                    ( PlayerClassCall(_3) )
# 1143 "parse.ml"
               : 'call_class))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args_list_opt) in
    Obj.repr(
# 171 "parse.mly"
                                                  ( CardClassCall(_3) )
# 1150 "parse.ml"
               : 'call_class))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 174 "parse.mly"
                   ( AttrCall(_1, _3) )
# 1158 "parse.ml"
               : 'call_attr))
; (fun __caml_parser_env ->
    Obj.repr(
# 177 "parse.mly"
                       ( Noexpr )
# 1164 "parse.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 178 "parse.mly"
                       ( _1 )
# 1171 "parse.ml"
               : 'expr_opt))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
