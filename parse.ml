type token =
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | LSQUARE
  | RSQUARE
  | STICK
  | COLON
  | COMMA
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | ASSIGN
  | MOD
  | POWER
  | FLOOR
  | DOTDOT
  | NEWLINE
  | NOT
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | AND
  | OR
  | IN
  | RETURN
  | IF
  | ELIF
  | ELSE
  | FOR
  | WHILE
  | INT
  | BOOL
  | FLOAT
  | NONE
  | STRING
  | ACTOR
  | OBJECT
  | STACK
  | SERIES
  | COLLECTION
  | RANGE
  | WHEN
  | DO
  | LET
  | BE
  | WITH
  | NEW
  | MAIN
  | LITERAL of (int)
  | BLIT of (bool)
  | ID of (string)
  | ACTIONID of (string)
  | FLIT of (string)
  | CONST
  | EOF

open Parsing;;
let _ = parse_error;;
# 4 "parse.mly"
open Ast
# 68 "parse.ml"
let yytransl_const = [|
  257 (* LPAREN *);
  258 (* RPAREN *);
  259 (* LBRACE *);
  260 (* RBRACE *);
  261 (* LSQUARE *);
  262 (* RSQUARE *);
  263 (* STICK *);
  264 (* COLON *);
  265 (* COMMA *);
  266 (* PLUS *);
  267 (* MINUS *);
  268 (* TIMES *);
  269 (* DIVIDE *);
  270 (* ASSIGN *);
  271 (* MOD *);
  272 (* POWER *);
  273 (* FLOOR *);
  274 (* DOTDOT *);
  275 (* NEWLINE *);
  276 (* NOT *);
  277 (* EQ *);
  278 (* NEQ *);
  279 (* LT *);
  280 (* LEQ *);
  281 (* GT *);
  282 (* GEQ *);
  283 (* AND *);
  284 (* OR *);
  285 (* IN *);
  286 (* RETURN *);
  287 (* IF *);
  288 (* ELIF *);
  289 (* ELSE *);
  290 (* FOR *);
  291 (* WHILE *);
  292 (* INT *);
  293 (* BOOL *);
  294 (* FLOAT *);
  295 (* NONE *);
  296 (* STRING *);
  297 (* ACTOR *);
  298 (* OBJECT *);
  299 (* STACK *);
  300 (* SERIES *);
  301 (* COLLECTION *);
  302 (* RANGE *);
  303 (* WHEN *);
  304 (* DO *);
  305 (* LET *);
  306 (* BE *);
  307 (* WITH *);
  308 (* NEW *);
  309 (* MAIN *);
  315 (* CONST *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  310 (* LITERAL *);
  311 (* BLIT *);
  312 (* ID *);
  313 (* ACTIONID *);
  314 (* FLIT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\002\000\003\000\
\004\000\004\000\005\000\006\000\006\000\007\000\008\000\011\000\
\010\000\010\000\010\000\016\000\016\000\016\000\009\000\017\000\
\018\000\012\000\012\000\012\000\012\000\019\000\013\000\013\000\
\015\000\015\000\015\000\015\000\015\000\020\000\020\000\023\000\
\024\000\021\000\022\000\014\000\014\000\014\000\014\000\014\000\
\014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
\014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
\014\000\014\000\014\000\014\000\025\000\026\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\002\000\002\000\002\000\003\000\
\007\000\013\000\010\000\006\000\006\000\003\000\004\000\002\000\
\002\000\002\000\002\000\001\000\001\000\001\000\001\000\003\000\
\002\000\000\000\001\000\002\000\004\000\002\000\001\000\004\000\
\001\000\002\000\001\000\001\000\001\000\003\000\003\000\001\000\
\001\000\002\000\002\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\002\000\003\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\003\000\004\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\071\000\000\000\000\000\000\000\000\000\000\000\
\000\000\001\000\003\000\004\000\005\000\006\000\007\000\000\000\
\023\000\000\000\000\000\000\000\000\000\000\000\020\000\022\000\
\021\000\000\000\018\000\017\000\019\000\000\000\000\000\000\000\
\008\000\000\000\000\000\000\000\027\000\014\000\000\000\000\000\
\000\000\000\000\000\000\000\000\025\000\000\000\028\000\024\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\068\000\064\000\066\000\000\000\065\000\000\000\000\000\
\035\000\036\000\037\000\062\000\063\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\042\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\015\000\029\000\013\000\000\000\000\000\000\000\
\000\000\009\000\061\000\040\000\041\000\038\000\039\000\000\000\
\000\000\000\000\031\000\000\000\069\000\000\000\000\000\000\000\
\000\000\000\000\057\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\
\000\000\070\000\000\000\000\000\000\000\011\000\000\000\032\000\
\000\000\000\000\010\000"

let yydgoto = "\002\000\
\003\000\004\000\011\000\012\000\013\000\014\000\015\000\033\000\
\027\000\035\000\106\000\036\000\114\000\063\000\064\000\028\000\
\029\000\037\000\115\000\065\000\066\000\067\000\110\000\111\000\
\068\000\069\000"

let yysindex = "\024\000\
\000\000\000\000\000\000\041\000\000\000\250\254\029\255\039\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\061\255\
\000\000\013\255\041\255\044\255\128\255\000\000\000\000\000\000\
\000\000\017\255\000\000\000\000\000\000\044\255\000\000\041\255\
\000\000\000\000\064\255\053\255\000\000\000\000\101\255\018\255\
\055\255\104\255\004\255\057\255\000\000\056\255\000\000\000\000\
\069\255\023\255\066\255\094\255\094\255\094\255\094\255\020\255\
\094\255\000\000\000\000\000\000\008\255\000\000\206\255\100\255\
\000\000\000\000\000\000\000\000\000\000\103\255\076\255\044\255\
\000\000\111\255\161\255\206\255\206\255\182\255\000\000\206\255\
\005\255\094\255\059\255\094\255\094\255\094\255\094\255\094\255\
\094\255\094\255\094\255\094\255\094\255\094\255\094\255\094\255\
\094\255\094\255\000\000\000\000\000\000\206\255\122\255\120\255\
\123\255\000\000\000\000\000\000\000\000\000\000\000\000\070\255\
\094\255\126\255\000\000\206\255\000\000\000\255\000\255\097\255\
\097\255\106\255\000\000\007\255\194\002\194\002\016\255\016\255\
\016\255\016\255\177\002\225\255\121\255\005\255\000\000\135\255\
\206\255\000\000\041\255\143\255\145\255\000\000\102\255\000\000\
\146\255\111\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\149\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\149\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\001\000\000\000\155\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\149\255\
\000\000\000\000\000\000\102\002\157\255\000\000\000\000\163\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\046\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\127\002\000\000\254\000\039\001\054\000\
\107\000\213\000\000\000\160\000\243\001\028\002\085\001\126\001\
\165\001\204\001\069\002\091\002\000\000\000\000\000\000\000\000\
\009\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\227\255\
\162\000\255\255\023\000\236\255\045\000\252\255\000\000\000\000\
\000\000\222\255\063\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000"

let yytablesize = 988
let yytable = "\044\000\
\067\000\047\000\043\000\016\000\052\000\112\000\047\000\021\000\
\081\000\041\000\030\000\086\000\087\000\030\000\088\000\089\000\
\090\000\030\000\086\000\087\000\039\000\082\000\089\000\053\000\
\001\000\084\000\085\000\086\000\087\000\042\000\088\000\089\000\
\090\000\054\000\055\000\017\000\019\000\056\000\057\000\020\000\
\010\000\101\000\058\000\032\000\034\000\012\000\039\000\075\000\
\076\000\077\000\078\000\103\000\080\000\046\000\046\000\083\000\
\050\000\059\000\060\000\061\000\113\000\062\000\031\000\071\000\
\040\000\070\000\102\000\022\000\047\000\072\000\022\000\104\000\
\073\000\074\000\049\000\079\000\052\000\116\000\032\000\118\000\
\119\000\120\000\121\000\122\000\123\000\124\000\125\000\126\000\
\127\000\128\000\129\000\130\000\131\000\132\000\052\000\053\000\
\023\000\024\000\025\000\023\000\024\000\025\000\017\000\099\000\
\100\000\017\000\047\000\048\000\137\000\142\000\022\000\105\000\
\089\000\053\000\058\000\117\000\026\000\086\000\087\000\045\000\
\134\000\089\000\090\000\133\000\135\000\113\000\022\000\138\000\
\139\000\059\000\060\000\061\000\058\000\062\000\022\000\038\000\
\023\000\024\000\025\000\023\000\024\000\025\000\017\000\141\000\
\143\000\017\000\144\000\059\000\060\000\061\000\026\000\062\000\
\145\000\146\000\051\000\023\000\024\000\025\000\033\000\058\000\
\034\000\017\000\107\000\023\000\024\000\025\000\043\000\018\000\
\147\000\017\000\084\000\085\000\086\000\087\000\136\000\088\000\
\089\000\090\000\140\000\000\000\000\000\091\000\092\000\093\000\
\094\000\095\000\096\000\097\000\098\000\000\000\000\000\084\000\
\085\000\086\000\087\000\000\000\088\000\089\000\090\000\000\000\
\000\000\000\000\091\000\092\000\093\000\094\000\095\000\096\000\
\097\000\098\000\000\000\000\000\056\000\108\000\109\000\084\000\
\085\000\086\000\087\000\000\000\088\000\089\000\090\000\000\000\
\000\000\000\000\091\000\092\000\093\000\094\000\095\000\096\000\
\097\000\098\000\084\000\085\000\086\000\087\000\000\000\088\000\
\089\000\090\000\000\000\000\000\000\000\091\000\092\000\093\000\
\094\000\095\000\096\000\097\000\000\000\044\000\000\000\000\000\
\000\000\000\000\067\000\000\000\067\000\000\000\000\000\000\000\
\000\000\067\000\067\000\067\000\067\000\067\000\000\000\067\000\
\067\000\067\000\000\000\000\000\000\000\067\000\067\000\067\000\
\067\000\067\000\067\000\067\000\067\000\000\000\000\000\000\000\
\067\000\067\000\000\000\000\000\000\000\000\000\045\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\067\000\
\000\000\067\000\000\000\000\000\000\000\067\000\000\000\046\000\
\067\000\046\000\000\000\067\000\000\000\000\000\046\000\046\000\
\046\000\046\000\046\000\000\000\046\000\000\000\046\000\000\000\
\000\000\000\000\046\000\046\000\046\000\046\000\046\000\046\000\
\046\000\046\000\000\000\000\000\050\000\046\000\046\000\005\000\
\000\000\006\000\000\000\000\000\012\000\007\000\012\000\000\000\
\008\000\000\000\012\000\009\000\046\000\012\000\046\000\000\000\
\012\000\000\000\046\000\000\000\047\000\046\000\047\000\000\000\
\046\000\000\000\000\000\047\000\047\000\047\000\047\000\047\000\
\000\000\047\000\000\000\047\000\000\000\051\000\000\000\047\000\
\047\000\047\000\047\000\047\000\047\000\047\000\047\000\000\000\
\000\000\000\000\047\000\047\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\047\000\000\000\047\000\000\000\000\000\000\000\047\000\
\000\000\058\000\047\000\058\000\052\000\047\000\000\000\000\000\
\058\000\058\000\058\000\000\000\000\000\000\000\058\000\000\000\
\058\000\000\000\000\000\000\000\058\000\058\000\058\000\058\000\
\058\000\058\000\058\000\058\000\000\000\000\000\000\000\058\000\
\058\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\053\000\000\000\000\000\058\000\000\000\
\058\000\000\000\000\000\000\000\058\000\000\000\056\000\058\000\
\056\000\000\000\058\000\000\000\000\000\056\000\056\000\056\000\
\000\000\000\000\000\000\056\000\000\000\000\000\000\000\000\000\
\000\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
\056\000\000\000\048\000\000\000\056\000\056\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\044\000\
\000\000\044\000\000\000\056\000\000\000\056\000\044\000\044\000\
\044\000\056\000\000\000\000\000\056\000\000\000\000\000\056\000\
\000\000\000\000\044\000\044\000\044\000\044\000\044\000\044\000\
\044\000\044\000\000\000\049\000\000\000\044\000\044\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\045\000\000\000\045\000\000\000\044\000\000\000\044\000\045\000\
\045\000\045\000\044\000\000\000\000\000\044\000\000\000\000\000\
\044\000\000\000\000\000\045\000\045\000\045\000\045\000\045\000\
\045\000\045\000\045\000\000\000\054\000\000\000\045\000\045\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\045\000\050\000\045\000\
\050\000\000\000\055\000\045\000\000\000\050\000\045\000\000\000\
\000\000\045\000\000\000\000\000\000\000\060\000\000\000\000\000\
\000\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
\050\000\000\000\000\000\000\000\050\000\050\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\059\000\051\000\
\000\000\051\000\000\000\050\000\000\000\050\000\051\000\000\000\
\000\000\050\000\000\000\000\000\050\000\000\000\000\000\050\000\
\000\000\000\000\051\000\051\000\051\000\051\000\051\000\051\000\
\051\000\051\000\000\000\000\000\000\000\051\000\051\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\052\000\000\000\
\052\000\000\000\000\000\000\000\051\000\052\000\051\000\000\000\
\000\000\000\000\051\000\000\000\000\000\051\000\000\000\000\000\
\051\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
\052\000\000\000\000\000\000\000\052\000\052\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\053\000\000\000\053\000\
\000\000\000\000\000\000\052\000\053\000\052\000\000\000\000\000\
\000\000\052\000\000\000\000\000\052\000\000\000\000\000\052\000\
\053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
\000\000\000\000\000\000\053\000\053\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\048\000\000\000\048\000\000\000\
\000\000\000\000\053\000\048\000\053\000\000\000\000\000\000\000\
\053\000\000\000\000\000\053\000\000\000\000\000\053\000\048\000\
\048\000\000\000\000\000\000\000\000\000\048\000\048\000\000\000\
\000\000\000\000\048\000\048\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\049\000\000\000\049\000\
\000\000\048\000\000\000\048\000\049\000\000\000\000\000\048\000\
\000\000\000\000\048\000\000\000\000\000\048\000\000\000\000\000\
\049\000\049\000\000\000\000\000\000\000\000\000\049\000\049\000\
\000\000\000\000\000\000\049\000\049\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\054\000\000\000\
\054\000\000\000\049\000\000\000\049\000\054\000\000\000\000\000\
\049\000\000\000\000\000\049\000\000\000\000\000\049\000\000\000\
\000\000\000\000\000\000\000\000\055\000\000\000\055\000\054\000\
\054\000\000\000\000\000\055\000\054\000\054\000\000\000\060\000\
\000\000\060\000\000\000\000\000\000\000\000\000\060\000\000\000\
\000\000\000\000\000\000\054\000\000\000\054\000\055\000\000\000\
\000\000\054\000\055\000\055\000\054\000\000\000\000\000\054\000\
\059\000\000\000\059\000\000\000\000\000\060\000\060\000\059\000\
\000\000\055\000\000\000\055\000\000\000\000\000\000\000\055\000\
\000\000\000\000\055\000\000\000\060\000\055\000\060\000\000\000\
\000\000\000\000\060\000\000\000\000\000\060\000\059\000\059\000\
\060\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\059\000\000\000\059\000\
\000\000\000\000\000\000\059\000\000\000\000\000\059\000\000\000\
\000\000\059\000\084\000\085\000\086\000\087\000\000\000\088\000\
\089\000\090\000\000\000\000\000\000\000\091\000\092\000\093\000\
\094\000\095\000\096\000\084\000\085\000\086\000\087\000\000\000\
\088\000\089\000\090\000\000\000\000\000\000\000\000\000\000\000\
\093\000\094\000\095\000\096\000"

let yycheck = "\034\000\
\000\000\036\000\032\000\005\000\001\001\001\001\041\000\009\000\
\001\001\030\000\002\001\012\001\013\001\001\001\015\001\016\001\
\017\001\009\001\012\001\013\001\022\000\014\001\016\001\020\001\
\001\000\010\001\011\001\012\001\013\001\031\000\015\001\016\001\
\017\001\030\001\031\001\042\001\008\001\034\001\035\001\001\001\
\000\000\071\000\039\001\003\001\001\001\000\000\048\000\052\000\
\053\000\054\000\055\000\072\000\057\000\000\000\002\001\048\001\
\002\001\054\001\055\001\056\001\056\001\058\001\050\001\008\001\
\048\001\009\001\071\000\007\001\103\000\001\001\007\001\073\000\
\050\001\008\001\057\001\056\001\001\001\082\000\003\001\084\000\
\085\000\086\000\087\000\088\000\089\000\090\000\091\000\092\000\
\093\000\094\000\095\000\096\000\097\000\098\000\001\001\020\001\
\036\001\037\001\038\001\036\001\037\001\038\001\042\001\004\001\
\002\001\042\001\000\000\007\001\113\000\139\000\007\001\001\001\
\016\001\020\001\039\001\057\001\056\001\012\001\013\001\056\001\
\001\001\016\001\017\001\002\001\002\001\056\001\007\001\002\001\
\008\001\054\001\055\001\056\001\039\001\058\001\007\001\008\001\
\036\001\037\001\038\001\036\001\037\001\038\001\042\001\009\001\
\002\001\042\001\002\001\054\001\055\001\056\001\002\001\058\001\
\051\001\008\001\051\001\036\001\037\001\038\001\004\001\000\000\
\004\001\042\001\002\001\036\001\037\001\038\001\004\001\006\000\
\146\000\042\001\010\001\011\001\012\001\013\001\112\000\015\001\
\016\001\017\001\134\000\255\255\255\255\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\255\255\255\255\010\001\
\011\001\012\001\013\001\255\255\015\001\016\001\017\001\255\255\
\255\255\255\255\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\255\255\255\255\000\000\032\001\033\001\010\001\
\011\001\012\001\013\001\255\255\015\001\016\001\017\001\255\255\
\255\255\255\255\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\010\001\011\001\012\001\013\001\255\255\015\001\
\016\001\017\001\255\255\255\255\255\255\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\255\255\000\000\255\255\255\255\
\255\255\255\255\002\001\255\255\004\001\255\255\255\255\255\255\
\255\255\009\001\010\001\011\001\012\001\013\001\255\255\015\001\
\016\001\017\001\255\255\255\255\255\255\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\255\255\255\255\255\255\
\032\001\033\001\255\255\255\255\255\255\255\255\000\000\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\047\001\
\255\255\049\001\255\255\255\255\255\255\053\001\255\255\002\001\
\056\001\004\001\255\255\059\001\255\255\255\255\009\001\010\001\
\011\001\012\001\013\001\255\255\015\001\255\255\017\001\255\255\
\255\255\255\255\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\255\255\255\255\000\000\032\001\033\001\047\001\
\255\255\049\001\255\255\255\255\047\001\053\001\049\001\255\255\
\056\001\255\255\053\001\059\001\047\001\056\001\049\001\255\255\
\059\001\255\255\053\001\255\255\002\001\056\001\004\001\255\255\
\059\001\255\255\255\255\009\001\010\001\011\001\012\001\013\001\
\255\255\015\001\255\255\017\001\255\255\000\000\255\255\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\255\255\
\255\255\255\255\032\001\033\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\047\001\255\255\049\001\255\255\255\255\255\255\053\001\
\255\255\002\001\056\001\004\001\000\000\059\001\255\255\255\255\
\009\001\010\001\011\001\255\255\255\255\255\255\015\001\255\255\
\017\001\255\255\255\255\255\255\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\255\255\255\255\255\255\032\001\
\033\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\000\000\255\255\255\255\047\001\255\255\
\049\001\255\255\255\255\255\255\053\001\255\255\002\001\056\001\
\004\001\255\255\059\001\255\255\255\255\009\001\010\001\011\001\
\255\255\255\255\255\255\015\001\255\255\255\255\255\255\255\255\
\255\255\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\255\255\000\000\255\255\032\001\033\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\002\001\
\255\255\004\001\255\255\047\001\255\255\049\001\009\001\010\001\
\011\001\053\001\255\255\255\255\056\001\255\255\255\255\059\001\
\255\255\255\255\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\255\255\000\000\255\255\032\001\033\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\002\001\255\255\004\001\255\255\047\001\255\255\049\001\009\001\
\010\001\011\001\053\001\255\255\255\255\056\001\255\255\255\255\
\059\001\255\255\255\255\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\255\255\000\000\255\255\032\001\033\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\047\001\002\001\049\001\
\004\001\255\255\000\000\053\001\255\255\009\001\056\001\255\255\
\255\255\059\001\255\255\255\255\255\255\000\000\255\255\255\255\
\255\255\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\255\255\255\255\255\255\032\001\033\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\000\000\002\001\
\255\255\004\001\255\255\047\001\255\255\049\001\009\001\255\255\
\255\255\053\001\255\255\255\255\056\001\255\255\255\255\059\001\
\255\255\255\255\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\255\255\255\255\255\255\032\001\033\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\002\001\255\255\
\004\001\255\255\255\255\255\255\047\001\009\001\049\001\255\255\
\255\255\255\255\053\001\255\255\255\255\056\001\255\255\255\255\
\059\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\255\255\255\255\255\255\032\001\033\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\002\001\255\255\004\001\
\255\255\255\255\255\255\047\001\009\001\049\001\255\255\255\255\
\255\255\053\001\255\255\255\255\056\001\255\255\255\255\059\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\255\255\255\255\255\255\032\001\033\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\002\001\255\255\004\001\255\255\
\255\255\255\255\047\001\009\001\049\001\255\255\255\255\255\255\
\053\001\255\255\255\255\056\001\255\255\255\255\059\001\021\001\
\022\001\255\255\255\255\255\255\255\255\027\001\028\001\255\255\
\255\255\255\255\032\001\033\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\002\001\255\255\004\001\
\255\255\047\001\255\255\049\001\009\001\255\255\255\255\053\001\
\255\255\255\255\056\001\255\255\255\255\059\001\255\255\255\255\
\021\001\022\001\255\255\255\255\255\255\255\255\027\001\028\001\
\255\255\255\255\255\255\032\001\033\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\002\001\255\255\
\004\001\255\255\047\001\255\255\049\001\009\001\255\255\255\255\
\053\001\255\255\255\255\056\001\255\255\255\255\059\001\255\255\
\255\255\255\255\255\255\255\255\002\001\255\255\004\001\027\001\
\028\001\255\255\255\255\009\001\032\001\033\001\255\255\002\001\
\255\255\004\001\255\255\255\255\255\255\255\255\009\001\255\255\
\255\255\255\255\255\255\047\001\255\255\049\001\028\001\255\255\
\255\255\053\001\032\001\033\001\056\001\255\255\255\255\059\001\
\002\001\255\255\004\001\255\255\255\255\032\001\033\001\009\001\
\255\255\047\001\255\255\049\001\255\255\255\255\255\255\053\001\
\255\255\255\255\056\001\255\255\047\001\059\001\049\001\255\255\
\255\255\255\255\053\001\255\255\255\255\056\001\032\001\033\001\
\059\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\047\001\255\255\049\001\
\255\255\255\255\255\255\053\001\255\255\255\255\056\001\255\255\
\255\255\059\001\010\001\011\001\012\001\013\001\255\255\015\001\
\016\001\017\001\255\255\255\255\255\255\021\001\022\001\023\001\
\024\001\025\001\026\001\010\001\011\001\012\001\013\001\255\255\
\015\001\016\001\017\001\255\255\255\255\255\255\255\255\255\255\
\023\001\024\001\025\001\026\001"

let yynames_const = "\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  LSQUARE\000\
  RSQUARE\000\
  STICK\000\
  COLON\000\
  COMMA\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  ASSIGN\000\
  MOD\000\
  POWER\000\
  FLOOR\000\
  DOTDOT\000\
  NEWLINE\000\
  NOT\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  AND\000\
  OR\000\
  IN\000\
  RETURN\000\
  IF\000\
  ELIF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  INT\000\
  BOOL\000\
  FLOAT\000\
  NONE\000\
  STRING\000\
  ACTOR\000\
  OBJECT\000\
  STACK\000\
  SERIES\000\
  COLLECTION\000\
  RANGE\000\
  WHEN\000\
  DO\000\
  LET\000\
  BE\000\
  WITH\000\
  NEW\000\
  MAIN\000\
  CONST\000\
  EOF\000\
  "

let yynames_block = "\
  LITERAL\000\
  BLIT\000\
  ID\000\
  ACTIONID\000\
  FLIT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 34 "parse.mly"
              ( _1 )
# 558 "parse.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 37 "parse.mly"
                        ()
# 564 "parse.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'main_decl) in
    Obj.repr(
# 38 "parse.mly"
                        ()
# 572 "parse.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'class_decl) in
    Obj.repr(
# 39 "parse.mly"
                        ()
# 580 "parse.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'action_decl) in
    Obj.repr(
# 40 "parse.mly"
                        ()
# 588 "parse.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'helper_decl) in
    Obj.repr(
# 41 "parse.mly"
                        ()
# 596 "parse.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'attr_decl) in
    Obj.repr(
# 42 "parse.mly"
                        ()
# 604 "parse.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_block) in
    Obj.repr(
# 45 "parse.mly"
                            ()
# 611 "parse.ml"
               : 'main_decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'clas) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'class_block) in
    Obj.repr(
# 48 "parse.mly"
                                                                                                   ()
# 620 "parse.ml"
               : 'class_decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 11 : 'clas) in
    let _4 = (Parsing.peek_val __caml_parser_env 9 : 'params_list) in
    let _7 = (Parsing.peek_val __caml_parser_env 6 : 'typ) in
    let _9 = (Parsing.peek_val __caml_parser_env 4 : 'args_list) in
    let _13 = (Parsing.peek_val __caml_parser_env 0 : 'class_block) in
    Obj.repr(
# 49 "parse.mly"
                                                                                                   ()
# 631 "parse.ml"
               : 'class_decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 3 : 'params_list) in
    let _10 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_block) in
    Obj.repr(
# 52 "parse.mly"
                                                                                                   ()
# 642 "parse.ml"
               : 'action_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'params_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 55 "parse.mly"
                                                    ()
# 651 "parse.ml"
               : 'helper_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'params_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_block) in
    Obj.repr(
# 56 "parse.mly"
                                                    ()
# 660 "parse.ml"
               : 'helper_decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 60 "parse.mly"
                      ()
# 667 "parse.ml"
               : 'attr_decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'stmt_block) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'stmt) in
    Obj.repr(
# 63 "parse.mly"
                                    ()
# 675 "parse.ml"
               : 'stmt_block))
; (fun __caml_parser_env ->
    Obj.repr(
# 66 "parse.mly"
                    ()
# 681 "parse.ml"
               : 'class_block))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'prim_typ) in
    Obj.repr(
# 71 "parse.mly"
                   ()
# 689 "parse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'clas) in
    Obj.repr(
# 72 "parse.mly"
                   ()
# 697 "parse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'template_class) in
    Obj.repr(
# 73 "parse.mly"
                         ()
# 705 "parse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 76 "parse.mly"
                    ( Int )
# 711 "parse.ml"
               : 'prim_typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 77 "parse.mly"
                    ( Float )
# 717 "parse.ml"
               : 'prim_typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 78 "parse.mly"
                    ( Bool  )
# 723 "parse.ml"
               : 'prim_typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 82 "parse.mly"
                    ( )
# 729 "parse.ml"
               : 'clas))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 85 "parse.mly"
                     ( )
# 736 "parse.ml"
               : 'template_class))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 88 "parse.mly"
                 ( )
# 744 "parse.ml"
               : 'param))
; (fun __caml_parser_env ->
    Obj.repr(
# 91 "parse.mly"
                                    ()
# 750 "parse.ml"
               : 'params_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'param) in
    Obj.repr(
# 92 "parse.mly"
                                    ()
# 757 "parse.ml"
               : 'params_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'params_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'param) in
    Obj.repr(
# 93 "parse.mly"
                                    ()
# 765 "parse.ml"
               : 'params_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'param) in
    Obj.repr(
# 94 "parse.mly"
                                    ()
# 772 "parse.ml"
               : 'params_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 97 "parse.mly"
                 ()
# 780 "parse.ml"
               : 'arg))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'arg) in
    Obj.repr(
# 100 "parse.mly"
                ()
# 787 "parse.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'arg) in
    Obj.repr(
# 101 "parse.mly"
                              ()
# 794 "parse.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 105 "parse.mly"
                              ()
# 801 "parse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 106 "parse.mly"
                              ()
# 808 "parse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'if_stmt) in
    Obj.repr(
# 107 "parse.mly"
                              ()
# 815 "parse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'for_stmt) in
    Obj.repr(
# 108 "parse.mly"
                              ()
# 822 "parse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'while_stmt) in
    Obj.repr(
# 109 "parse.mly"
                              ()
# 829 "parse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'elif_stmt) in
    Obj.repr(
# 114 "parse.mly"
                         ()
# 837 "parse.ml"
               : 'if_stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'else_stmt) in
    Obj.repr(
# 115 "parse.mly"
                         ()
# 845 "parse.ml"
               : 'if_stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 118 "parse.mly"
                ()
# 851 "parse.ml"
               : 'elif_stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 121 "parse.mly"
                ()
# 857 "parse.ml"
               : 'else_stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 124 "parse.mly"
                ()
# 864 "parse.ml"
               : 'for_stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 127 "parse.mly"
                    ()
# 871 "parse.ml"
               : 'while_stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 131 "parse.mly"
                       ()
# 879 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 132 "parse.mly"
                       ()
# 887 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 133 "parse.mly"
                       ()
# 895 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 134 "parse.mly"
                       ()
# 903 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 135 "parse.mly"
                       ()
# 911 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 136 "parse.mly"
                       ()
# 919 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 137 "parse.mly"
                       ()
# 927 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 138 "parse.mly"
                       ()
# 935 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 139 "parse.mly"
                       ()
# 943 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 140 "parse.mly"
                       ()
# 951 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 141 "parse.mly"
                       ()
# 959 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 142 "parse.mly"
                       ()
# 967 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 143 "parse.mly"
                       ()
# 975 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 144 "parse.mly"
                       ()
# 983 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 145 "parse.mly"
                       ()
# 991 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 146 "parse.mly"
                       ()
# 999 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 147 "parse.mly"
                       ()
# 1006 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 148 "parse.mly"
                         ()
# 1013 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'call_action) in
    Obj.repr(
# 149 "parse.mly"
                       ()
# 1020 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'call_class) in
    Obj.repr(
# 150 "parse.mly"
                       ()
# 1027 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 152 "parse.mly"
                       ()
# 1034 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 153 "parse.mly"
                       ()
# 1041 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 154 "parse.mly"
                       ()
# 1048 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 155 "parse.mly"
                       ()
# 1055 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 156 "parse.mly"
                       ()
# 1061 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 164 "parse.mly"
                      ()
# 1069 "parse.ml"
               : 'call_action))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args_list) in
    Obj.repr(
# 167 "parse.mly"
                                 ()
# 1077 "parse.ml"
               : 'call_class))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
