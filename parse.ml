type token =
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | LSQUARE
  | RSQUARE
  | STICK
  | COLON
  | COMMA
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | ASSIGN
  | MOD
  | POWER
  | FLOOR
  | DOTDOT
  | NEWLINE
  | NOT
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | AND
  | OR
  | IN
  | RETURN
  | IF
  | ELIF
  | ELSE
  | FOR
  | WHILE
  | INT
  | BOOL
  | FLOAT
  | NONE
  | STRING
  | ACTOR
  | OBJECT
  | STACK
  | SERIES
  | COLLECTION
  | RANGE
  | WHEN
  | DO
  | LET
  | BE
  | WITH
  | NEW
  | MAIN
  | LITERAL of (int)
  | BLIT of (bool)
  | ID of (string)
  | ACTIONID of (string)
  | FLIT of (string)
  | CONST
  | EOF

open Parsing;;
let _ = parse_error;;
# 4 "parse.mly"
open Ast
# 68 "parse.ml"
let yytransl_const = [|
  257 (* LPAREN *);
  258 (* RPAREN *);
  259 (* LBRACE *);
  260 (* RBRACE *);
  261 (* LSQUARE *);
  262 (* RSQUARE *);
  263 (* STICK *);
  264 (* COLON *);
  265 (* COMMA *);
  266 (* PLUS *);
  267 (* MINUS *);
  268 (* TIMES *);
  269 (* DIVIDE *);
  270 (* ASSIGN *);
  271 (* MOD *);
  272 (* POWER *);
  273 (* FLOOR *);
  274 (* DOTDOT *);
  275 (* NEWLINE *);
  276 (* NOT *);
  277 (* EQ *);
  278 (* NEQ *);
  279 (* LT *);
  280 (* LEQ *);
  281 (* GT *);
  282 (* GEQ *);
  283 (* AND *);
  284 (* OR *);
  285 (* IN *);
  286 (* RETURN *);
  287 (* IF *);
  288 (* ELIF *);
  289 (* ELSE *);
  290 (* FOR *);
  291 (* WHILE *);
  292 (* INT *);
  293 (* BOOL *);
  294 (* FLOAT *);
  295 (* NONE *);
  296 (* STRING *);
  297 (* ACTOR *);
  298 (* OBJECT *);
  299 (* STACK *);
  300 (* SERIES *);
  301 (* COLLECTION *);
  302 (* RANGE *);
  303 (* WHEN *);
  304 (* DO *);
  305 (* LET *);
  306 (* BE *);
  307 (* WITH *);
  308 (* NEW *);
  309 (* MAIN *);
  315 (* CONST *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  310 (* LITERAL *);
  311 (* BLIT *);
  312 (* ID *);
  313 (* ACTIONID *);
  314 (* FLIT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\002\000\003\000\
\004\000\004\000\005\000\006\000\006\000\007\000\008\000\011\000\
\010\000\010\000\010\000\016\000\016\000\016\000\009\000\017\000\
\018\000\012\000\012\000\012\000\019\000\013\000\013\000\013\000\
\015\000\015\000\015\000\015\000\015\000\020\000\020\000\023\000\
\024\000\021\000\022\000\014\000\014\000\014\000\014\000\014\000\
\014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
\014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
\014\000\014\000\014\000\014\000\025\000\026\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\002\000\002\000\002\000\003\000\
\007\000\013\000\010\000\006\000\006\000\003\000\004\000\002\000\
\002\000\002\000\002\000\001\000\001\000\001\000\001\000\003\000\
\002\000\000\000\001\000\003\000\001\000\000\000\001\000\003\000\
\001\000\002\000\001\000\001\000\001\000\003\000\003\000\001\000\
\001\000\002\000\002\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\002\000\003\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\003\000\004\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\071\000\000\000\000\000\000\000\000\000\000\000\
\000\000\001\000\003\000\004\000\005\000\006\000\007\000\000\000\
\023\000\000\000\000\000\026\000\000\000\000\000\020\000\022\000\
\021\000\000\000\018\000\017\000\019\000\026\000\000\000\000\000\
\008\000\000\000\000\000\027\000\014\000\000\000\000\000\000\000\
\000\000\000\000\025\000\000\000\000\000\024\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\068\000\
\064\000\066\000\000\000\065\000\000\000\000\000\035\000\036\000\
\037\000\062\000\063\000\000\000\028\000\026\000\000\000\000\000\
\000\000\000\000\000\000\000\000\042\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\015\000\013\000\000\000\000\000\000\000\000\000\009\000\061\000\
\040\000\041\000\038\000\039\000\000\000\000\000\031\000\000\000\
\069\000\000\000\000\000\000\000\000\000\000\000\057\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\016\000\070\000\000\000\000\000\000\000\032\000\
\011\000\000\000\000\000\000\000\010\000"

let yydgoto = "\002\000\
\003\000\004\000\011\000\012\000\013\000\014\000\015\000\033\000\
\027\000\034\000\103\000\035\000\109\000\110\000\062\000\028\000\
\029\000\036\000\111\000\063\000\064\000\065\000\107\000\108\000\
\066\000\067\000"

let yysindex = "\008\000\
\000\000\000\000\000\000\041\000\000\000\225\254\008\255\031\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\053\255\
\000\000\002\255\032\255\000\000\129\255\000\000\000\000\000\000\
\000\000\247\254\000\000\000\000\000\000\000\000\000\000\032\255\
\000\000\090\255\005\255\000\000\000\000\140\255\248\254\011\255\
\093\255\003\255\000\000\045\255\000\000\000\000\055\255\012\255\
\058\255\030\255\030\255\030\255\030\255\017\255\030\255\000\000\
\000\000\000\000\007\255\000\000\217\255\073\255\000\000\000\000\
\000\000\000\000\000\000\009\255\000\000\000\000\000\000\081\255\
\173\255\217\255\217\255\193\255\000\000\217\255\030\255\030\255\
\035\255\030\255\030\255\030\255\030\255\030\255\030\255\030\255\
\030\255\030\255\030\255\030\255\030\255\030\255\030\255\030\255\
\000\000\000\000\217\255\013\255\132\255\085\255\000\000\000\000\
\000\000\000\000\000\000\000\000\015\255\217\255\000\000\217\255\
\000\000\059\255\059\255\077\255\077\255\019\000\000\000\014\255\
\138\255\138\255\236\255\236\255\236\255\236\255\195\002\177\002\
\086\255\030\255\000\000\000\000\030\255\032\255\016\255\000\000\
\000\000\047\255\091\255\081\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\001\000\000\000\097\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\102\002\099\255\000\000\000\000\100\255\038\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\046\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\042\255\000\000\127\002\
\000\000\254\000\039\001\054\000\107\000\213\000\000\000\160\000\
\243\001\028\002\085\001\126\001\165\001\204\001\069\002\091\002\
\000\000\038\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\224\255\
\099\000\253\255\222\255\231\255\251\255\028\000\000\000\000\000\
\000\000\089\000\005\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000"

let yytablesize = 989
let yytable = "\042\000\
\067\000\016\000\030\000\050\000\040\000\021\000\044\000\079\000\
\001\000\050\000\017\000\032\000\048\000\045\000\129\000\019\000\
\132\000\138\000\038\000\045\000\080\000\045\000\051\000\133\000\
\133\000\084\000\085\000\041\000\051\000\087\000\050\000\020\000\
\052\000\053\000\032\000\098\000\054\000\055\000\039\000\030\000\
\010\000\056\000\038\000\029\000\100\000\012\000\030\000\056\000\
\047\000\051\000\029\000\031\000\068\000\046\000\081\000\070\000\
\057\000\058\000\059\000\022\000\060\000\071\000\057\000\058\000\
\059\000\072\000\060\000\101\000\056\000\061\000\084\000\085\000\
\077\000\086\000\087\000\088\000\097\000\073\000\074\000\075\000\
\076\000\102\000\078\000\057\000\058\000\059\000\131\000\060\000\
\023\000\024\000\025\000\113\000\087\000\134\000\017\000\099\000\
\022\000\139\000\140\000\022\000\033\000\137\000\034\000\043\000\
\018\000\141\000\047\000\112\000\026\000\114\000\115\000\116\000\
\117\000\118\000\119\000\120\000\121\000\122\000\123\000\124\000\
\125\000\126\000\127\000\128\000\135\000\023\000\024\000\025\000\
\023\000\024\000\025\000\017\000\130\000\069\000\017\000\022\000\
\037\000\136\000\022\000\000\000\000\000\000\000\000\000\049\000\
\000\000\043\000\046\000\082\000\083\000\084\000\085\000\000\000\
\086\000\087\000\088\000\000\000\000\000\000\000\000\000\058\000\
\091\000\092\000\093\000\094\000\023\000\024\000\025\000\023\000\
\024\000\025\000\017\000\000\000\000\000\017\000\104\000\023\000\
\024\000\025\000\000\000\000\000\000\000\017\000\082\000\083\000\
\084\000\085\000\000\000\086\000\087\000\088\000\000\000\000\000\
\000\000\089\000\090\000\091\000\092\000\093\000\094\000\095\000\
\096\000\000\000\082\000\083\000\084\000\085\000\000\000\086\000\
\087\000\088\000\000\000\000\000\056\000\089\000\090\000\091\000\
\092\000\093\000\094\000\095\000\096\000\000\000\000\000\000\000\
\105\000\106\000\082\000\083\000\084\000\085\000\000\000\086\000\
\087\000\088\000\000\000\000\000\000\000\089\000\090\000\091\000\
\092\000\093\000\094\000\095\000\096\000\082\000\083\000\084\000\
\085\000\000\000\086\000\087\000\088\000\044\000\000\000\000\000\
\000\000\000\000\067\000\000\000\067\000\000\000\000\000\000\000\
\000\000\067\000\067\000\067\000\067\000\067\000\000\000\067\000\
\067\000\067\000\000\000\000\000\000\000\067\000\067\000\067\000\
\067\000\067\000\067\000\067\000\067\000\000\000\084\000\085\000\
\067\000\067\000\087\000\088\000\000\000\000\000\045\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\067\000\
\000\000\067\000\000\000\000\000\000\000\067\000\000\000\046\000\
\067\000\046\000\000\000\067\000\000\000\000\000\046\000\046\000\
\046\000\046\000\046\000\000\000\046\000\000\000\046\000\000\000\
\000\000\000\000\046\000\046\000\046\000\046\000\046\000\046\000\
\046\000\046\000\000\000\000\000\050\000\046\000\046\000\005\000\
\000\000\006\000\000\000\000\000\012\000\007\000\012\000\000\000\
\008\000\000\000\012\000\009\000\046\000\012\000\046\000\000\000\
\012\000\000\000\046\000\000\000\047\000\046\000\047\000\000\000\
\046\000\000\000\000\000\047\000\047\000\047\000\047\000\047\000\
\000\000\047\000\000\000\047\000\000\000\051\000\000\000\047\000\
\047\000\047\000\047\000\047\000\047\000\047\000\047\000\000\000\
\000\000\000\000\047\000\047\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\047\000\000\000\047\000\000\000\000\000\000\000\047\000\
\000\000\058\000\047\000\058\000\052\000\047\000\000\000\000\000\
\058\000\058\000\058\000\000\000\000\000\000\000\058\000\000\000\
\058\000\000\000\000\000\000\000\058\000\058\000\058\000\058\000\
\058\000\058\000\058\000\058\000\000\000\000\000\000\000\058\000\
\058\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\053\000\000\000\000\000\058\000\000\000\
\058\000\000\000\000\000\000\000\058\000\000\000\056\000\058\000\
\056\000\000\000\058\000\000\000\000\000\056\000\056\000\056\000\
\000\000\000\000\000\000\056\000\000\000\000\000\000\000\000\000\
\000\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
\056\000\000\000\048\000\000\000\056\000\056\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\044\000\
\000\000\044\000\000\000\056\000\000\000\056\000\044\000\044\000\
\044\000\056\000\000\000\000\000\056\000\000\000\000\000\056\000\
\000\000\000\000\044\000\044\000\044\000\044\000\044\000\044\000\
\044\000\044\000\000\000\049\000\000\000\044\000\044\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\045\000\000\000\045\000\000\000\044\000\000\000\044\000\045\000\
\045\000\045\000\044\000\000\000\000\000\044\000\000\000\000\000\
\044\000\000\000\000\000\045\000\045\000\045\000\045\000\045\000\
\045\000\045\000\045\000\000\000\054\000\000\000\045\000\045\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\045\000\050\000\045\000\
\050\000\000\000\055\000\045\000\000\000\050\000\045\000\000\000\
\000\000\045\000\000\000\000\000\000\000\060\000\000\000\000\000\
\000\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
\050\000\000\000\000\000\000\000\050\000\050\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\059\000\051\000\
\000\000\051\000\000\000\050\000\000\000\050\000\051\000\000\000\
\000\000\050\000\000\000\000\000\050\000\000\000\000\000\050\000\
\000\000\000\000\051\000\051\000\051\000\051\000\051\000\051\000\
\051\000\051\000\000\000\000\000\000\000\051\000\051\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\052\000\000\000\
\052\000\000\000\000\000\000\000\051\000\052\000\051\000\000\000\
\000\000\000\000\051\000\000\000\000\000\051\000\000\000\000\000\
\051\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
\052\000\000\000\000\000\000\000\052\000\052\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\053\000\000\000\053\000\
\000\000\000\000\000\000\052\000\053\000\052\000\000\000\000\000\
\000\000\052\000\000\000\000\000\052\000\000\000\000\000\052\000\
\053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
\000\000\000\000\000\000\053\000\053\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\048\000\000\000\048\000\000\000\
\000\000\000\000\053\000\048\000\053\000\000\000\000\000\000\000\
\053\000\000\000\000\000\053\000\000\000\000\000\053\000\048\000\
\048\000\000\000\000\000\000\000\000\000\048\000\048\000\000\000\
\000\000\000\000\048\000\048\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\049\000\000\000\049\000\
\000\000\048\000\000\000\048\000\049\000\000\000\000\000\048\000\
\000\000\000\000\048\000\000\000\000\000\048\000\000\000\000\000\
\049\000\049\000\000\000\000\000\000\000\000\000\049\000\049\000\
\000\000\000\000\000\000\049\000\049\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\054\000\000\000\
\054\000\000\000\049\000\000\000\049\000\054\000\000\000\000\000\
\049\000\000\000\000\000\049\000\000\000\000\000\049\000\000\000\
\000\000\000\000\000\000\000\000\055\000\000\000\055\000\054\000\
\054\000\000\000\000\000\055\000\054\000\054\000\000\000\060\000\
\000\000\060\000\000\000\000\000\000\000\000\000\060\000\000\000\
\000\000\000\000\000\000\054\000\000\000\054\000\055\000\000\000\
\000\000\054\000\055\000\055\000\054\000\000\000\000\000\054\000\
\059\000\000\000\059\000\000\000\000\000\060\000\060\000\059\000\
\000\000\055\000\000\000\055\000\000\000\000\000\000\000\055\000\
\000\000\000\000\055\000\000\000\060\000\055\000\060\000\000\000\
\000\000\000\000\060\000\000\000\000\000\060\000\059\000\059\000\
\060\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\059\000\000\000\059\000\
\000\000\000\000\000\000\059\000\000\000\000\000\059\000\000\000\
\000\000\059\000\082\000\083\000\084\000\085\000\000\000\086\000\
\087\000\088\000\000\000\000\000\000\000\089\000\090\000\091\000\
\092\000\093\000\094\000\095\000\082\000\083\000\084\000\085\000\
\000\000\086\000\087\000\088\000\000\000\000\000\000\000\089\000\
\090\000\091\000\092\000\093\000\094\000"

let yycheck = "\032\000\
\000\000\005\000\001\001\001\001\030\000\009\000\002\001\001\001\
\001\000\001\001\042\001\003\001\002\001\009\001\002\001\008\001\
\002\001\002\001\022\000\009\001\014\001\009\001\020\001\009\001\
\009\001\012\001\013\001\031\000\020\001\016\001\001\001\001\001\
\030\001\031\001\003\001\068\000\034\001\035\001\048\001\002\001\
\000\000\039\001\046\000\002\001\070\000\000\000\009\001\039\001\
\057\001\020\001\009\001\050\001\008\001\000\000\048\001\001\001\
\054\001\055\001\056\001\007\001\058\001\050\001\054\001\055\001\
\056\001\008\001\058\001\071\000\039\001\042\000\012\001\013\001\
\056\001\015\001\016\001\017\001\004\001\050\000\051\000\052\000\
\053\000\001\001\055\000\054\001\055\001\056\001\002\001\058\001\
\036\001\037\001\038\001\057\001\016\001\008\001\042\001\068\000\
\007\001\051\001\008\001\007\001\004\001\134\000\004\001\004\001\
\006\000\140\000\000\000\080\000\056\001\082\000\083\000\084\000\
\085\000\086\000\087\000\088\000\089\000\090\000\091\000\092\000\
\093\000\094\000\095\000\096\000\130\000\036\001\037\001\038\001\
\036\001\037\001\038\001\042\001\001\001\045\000\042\001\007\001\
\008\001\133\000\007\001\255\255\255\255\255\255\255\255\051\001\
\255\255\056\001\007\001\010\001\011\001\012\001\013\001\255\255\
\015\001\016\001\017\001\255\255\255\255\255\255\255\255\000\000\
\023\001\024\001\025\001\026\001\036\001\037\001\038\001\036\001\
\037\001\038\001\042\001\255\255\255\255\042\001\002\001\036\001\
\037\001\038\001\255\255\255\255\255\255\042\001\010\001\011\001\
\012\001\013\001\255\255\015\001\016\001\017\001\255\255\255\255\
\255\255\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\255\255\010\001\011\001\012\001\013\001\255\255\015\001\
\016\001\017\001\255\255\255\255\000\000\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\255\255\255\255\255\255\
\032\001\033\001\010\001\011\001\012\001\013\001\255\255\015\001\
\016\001\017\001\255\255\255\255\255\255\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\010\001\011\001\012\001\
\013\001\255\255\015\001\016\001\017\001\000\000\255\255\255\255\
\255\255\255\255\002\001\255\255\004\001\255\255\255\255\255\255\
\255\255\009\001\010\001\011\001\012\001\013\001\255\255\015\001\
\016\001\017\001\255\255\255\255\255\255\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\255\255\012\001\013\001\
\032\001\033\001\016\001\017\001\255\255\255\255\000\000\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\047\001\
\255\255\049\001\255\255\255\255\255\255\053\001\255\255\002\001\
\056\001\004\001\255\255\059\001\255\255\255\255\009\001\010\001\
\011\001\012\001\013\001\255\255\015\001\255\255\017\001\255\255\
\255\255\255\255\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\255\255\255\255\000\000\032\001\033\001\047\001\
\255\255\049\001\255\255\255\255\047\001\053\001\049\001\255\255\
\056\001\255\255\053\001\059\001\047\001\056\001\049\001\255\255\
\059\001\255\255\053\001\255\255\002\001\056\001\004\001\255\255\
\059\001\255\255\255\255\009\001\010\001\011\001\012\001\013\001\
\255\255\015\001\255\255\017\001\255\255\000\000\255\255\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\255\255\
\255\255\255\255\032\001\033\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\047\001\255\255\049\001\255\255\255\255\255\255\053\001\
\255\255\002\001\056\001\004\001\000\000\059\001\255\255\255\255\
\009\001\010\001\011\001\255\255\255\255\255\255\015\001\255\255\
\017\001\255\255\255\255\255\255\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\255\255\255\255\255\255\032\001\
\033\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\000\000\255\255\255\255\047\001\255\255\
\049\001\255\255\255\255\255\255\053\001\255\255\002\001\056\001\
\004\001\255\255\059\001\255\255\255\255\009\001\010\001\011\001\
\255\255\255\255\255\255\015\001\255\255\255\255\255\255\255\255\
\255\255\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\255\255\000\000\255\255\032\001\033\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\002\001\
\255\255\004\001\255\255\047\001\255\255\049\001\009\001\010\001\
\011\001\053\001\255\255\255\255\056\001\255\255\255\255\059\001\
\255\255\255\255\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\255\255\000\000\255\255\032\001\033\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\002\001\255\255\004\001\255\255\047\001\255\255\049\001\009\001\
\010\001\011\001\053\001\255\255\255\255\056\001\255\255\255\255\
\059\001\255\255\255\255\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\255\255\000\000\255\255\032\001\033\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\047\001\002\001\049\001\
\004\001\255\255\000\000\053\001\255\255\009\001\056\001\255\255\
\255\255\059\001\255\255\255\255\255\255\000\000\255\255\255\255\
\255\255\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\255\255\255\255\255\255\032\001\033\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\000\000\002\001\
\255\255\004\001\255\255\047\001\255\255\049\001\009\001\255\255\
\255\255\053\001\255\255\255\255\056\001\255\255\255\255\059\001\
\255\255\255\255\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\255\255\255\255\255\255\032\001\033\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\002\001\255\255\
\004\001\255\255\255\255\255\255\047\001\009\001\049\001\255\255\
\255\255\255\255\053\001\255\255\255\255\056\001\255\255\255\255\
\059\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\255\255\255\255\255\255\032\001\033\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\002\001\255\255\004\001\
\255\255\255\255\255\255\047\001\009\001\049\001\255\255\255\255\
\255\255\053\001\255\255\255\255\056\001\255\255\255\255\059\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\255\255\255\255\255\255\032\001\033\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\002\001\255\255\004\001\255\255\
\255\255\255\255\047\001\009\001\049\001\255\255\255\255\255\255\
\053\001\255\255\255\255\056\001\255\255\255\255\059\001\021\001\
\022\001\255\255\255\255\255\255\255\255\027\001\028\001\255\255\
\255\255\255\255\032\001\033\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\002\001\255\255\004\001\
\255\255\047\001\255\255\049\001\009\001\255\255\255\255\053\001\
\255\255\255\255\056\001\255\255\255\255\059\001\255\255\255\255\
\021\001\022\001\255\255\255\255\255\255\255\255\027\001\028\001\
\255\255\255\255\255\255\032\001\033\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\002\001\255\255\
\004\001\255\255\047\001\255\255\049\001\009\001\255\255\255\255\
\053\001\255\255\255\255\056\001\255\255\255\255\059\001\255\255\
\255\255\255\255\255\255\255\255\002\001\255\255\004\001\027\001\
\028\001\255\255\255\255\009\001\032\001\033\001\255\255\002\001\
\255\255\004\001\255\255\255\255\255\255\255\255\009\001\255\255\
\255\255\255\255\255\255\047\001\255\255\049\001\028\001\255\255\
\255\255\053\001\032\001\033\001\056\001\255\255\255\255\059\001\
\002\001\255\255\004\001\255\255\255\255\032\001\033\001\009\001\
\255\255\047\001\255\255\049\001\255\255\255\255\255\255\053\001\
\255\255\255\255\056\001\255\255\047\001\059\001\049\001\255\255\
\255\255\255\255\053\001\255\255\255\255\056\001\032\001\033\001\
\059\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\047\001\255\255\049\001\
\255\255\255\255\255\255\053\001\255\255\255\255\056\001\255\255\
\255\255\059\001\010\001\011\001\012\001\013\001\255\255\015\001\
\016\001\017\001\255\255\255\255\255\255\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\010\001\011\001\012\001\013\001\
\255\255\015\001\016\001\017\001\255\255\255\255\255\255\021\001\
\022\001\023\001\024\001\025\001\026\001"

let yynames_const = "\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  LSQUARE\000\
  RSQUARE\000\
  STICK\000\
  COLON\000\
  COMMA\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  ASSIGN\000\
  MOD\000\
  POWER\000\
  FLOOR\000\
  DOTDOT\000\
  NEWLINE\000\
  NOT\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  AND\000\
  OR\000\
  IN\000\
  RETURN\000\
  IF\000\
  ELIF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  INT\000\
  BOOL\000\
  FLOAT\000\
  NONE\000\
  STRING\000\
  ACTOR\000\
  OBJECT\000\
  STACK\000\
  SERIES\000\
  COLLECTION\000\
  RANGE\000\
  WHEN\000\
  DO\000\
  LET\000\
  BE\000\
  WITH\000\
  NEW\000\
  MAIN\000\
  CONST\000\
  EOF\000\
  "

let yynames_block = "\
  LITERAL\000\
  BLIT\000\
  ID\000\
  ACTIONID\000\
  FLIT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 34 "parse.mly"
              ( _1 )
# 555 "parse.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 37 "parse.mly"
                        ()
# 561 "parse.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'main_decl) in
    Obj.repr(
# 38 "parse.mly"
                        ()
# 569 "parse.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'class_decl) in
    Obj.repr(
# 39 "parse.mly"
                        ()
# 577 "parse.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'action_decl) in
    Obj.repr(
# 40 "parse.mly"
                        ()
# 585 "parse.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'helper_decl) in
    Obj.repr(
# 41 "parse.mly"
                        ()
# 593 "parse.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'attr_decl) in
    Obj.repr(
# 42 "parse.mly"
                        ()
# 601 "parse.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_block) in
    Obj.repr(
# 45 "parse.mly"
                            ()
# 608 "parse.ml"
               : 'main_decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'clas) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'class_block) in
    Obj.repr(
# 48 "parse.mly"
                                                                                                   ()
# 617 "parse.ml"
               : 'class_decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 11 : 'clas) in
    let _4 = (Parsing.peek_val __caml_parser_env 9 : 'params_list) in
    let _7 = (Parsing.peek_val __caml_parser_env 6 : 'typ) in
    let _9 = (Parsing.peek_val __caml_parser_env 4 : 'args_list) in
    let _13 = (Parsing.peek_val __caml_parser_env 0 : 'class_block) in
    Obj.repr(
# 49 "parse.mly"
                                                                                                   ()
# 628 "parse.ml"
               : 'class_decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 3 : 'params_list) in
    let _10 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_block) in
    Obj.repr(
# 52 "parse.mly"
                                                                                                   ()
# 639 "parse.ml"
               : 'action_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'params_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 55 "parse.mly"
                                                    ()
# 648 "parse.ml"
               : 'helper_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'params_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_block) in
    Obj.repr(
# 56 "parse.mly"
                                                    ()
# 657 "parse.ml"
               : 'helper_decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 60 "parse.mly"
                      ()
# 664 "parse.ml"
               : 'attr_decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'stmt_block) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'stmt) in
    Obj.repr(
# 63 "parse.mly"
                                    ()
# 672 "parse.ml"
               : 'stmt_block))
; (fun __caml_parser_env ->
    Obj.repr(
# 66 "parse.mly"
                    ()
# 678 "parse.ml"
               : 'class_block))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'prim_typ) in
    Obj.repr(
# 71 "parse.mly"
                   ()
# 686 "parse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'clas) in
    Obj.repr(
# 72 "parse.mly"
                   ()
# 694 "parse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'template_class) in
    Obj.repr(
# 73 "parse.mly"
                         ()
# 702 "parse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 76 "parse.mly"
                    ( Int )
# 708 "parse.ml"
               : 'prim_typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 77 "parse.mly"
                    ( Float )
# 714 "parse.ml"
               : 'prim_typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 78 "parse.mly"
                    ( Bool  )
# 720 "parse.ml"
               : 'prim_typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 82 "parse.mly"
                    ( )
# 726 "parse.ml"
               : 'clas))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 85 "parse.mly"
                     ( )
# 733 "parse.ml"
               : 'template_class))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 88 "parse.mly"
                 ( )
# 741 "parse.ml"
               : 'param))
; (fun __caml_parser_env ->
    Obj.repr(
# 91 "parse.mly"
                                    ()
# 747 "parse.ml"
               : 'params_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'param) in
    Obj.repr(
# 92 "parse.mly"
                                    ()
# 754 "parse.ml"
               : 'params_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'params_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'param) in
    Obj.repr(
# 93 "parse.mly"
                                    ()
# 762 "parse.ml"
               : 'params_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 97 "parse.mly"
              ()
# 769 "parse.ml"
               : 'arg))
; (fun __caml_parser_env ->
    Obj.repr(
# 100 "parse.mly"
                                   ()
# 775 "parse.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'arg) in
    Obj.repr(
# 101 "parse.mly"
                                   ()
# 782 "parse.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'args_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arg) in
    Obj.repr(
# 102 "parse.mly"
                                   ()
# 790 "parse.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 107 "parse.mly"
                              ()
# 797 "parse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 108 "parse.mly"
                              ()
# 804 "parse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'if_stmt) in
    Obj.repr(
# 109 "parse.mly"
                              ()
# 811 "parse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'for_stmt) in
    Obj.repr(
# 110 "parse.mly"
                              ()
# 818 "parse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'while_stmt) in
    Obj.repr(
# 111 "parse.mly"
                              ()
# 825 "parse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'elif_stmt) in
    Obj.repr(
# 116 "parse.mly"
                         ()
# 833 "parse.ml"
               : 'if_stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'else_stmt) in
    Obj.repr(
# 117 "parse.mly"
                         ()
# 841 "parse.ml"
               : 'if_stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 120 "parse.mly"
                ()
# 847 "parse.ml"
               : 'elif_stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 123 "parse.mly"
                ()
# 853 "parse.ml"
               : 'else_stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 126 "parse.mly"
                ()
# 860 "parse.ml"
               : 'for_stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 129 "parse.mly"
                    ()
# 867 "parse.ml"
               : 'while_stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 133 "parse.mly"
                       ()
# 875 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 134 "parse.mly"
                       ()
# 883 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 135 "parse.mly"
                       ()
# 891 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 136 "parse.mly"
                       ()
# 899 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 137 "parse.mly"
                       ()
# 907 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 138 "parse.mly"
                       ()
# 915 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 139 "parse.mly"
                       ()
# 923 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 140 "parse.mly"
                       ()
# 931 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 141 "parse.mly"
                       ()
# 939 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 142 "parse.mly"
                       ()
# 947 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 143 "parse.mly"
                       ()
# 955 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 144 "parse.mly"
                       ()
# 963 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 145 "parse.mly"
                       ()
# 971 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 146 "parse.mly"
                       ()
# 979 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 147 "parse.mly"
                       ()
# 987 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 148 "parse.mly"
                       ()
# 995 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 149 "parse.mly"
                       ()
# 1002 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 150 "parse.mly"
                         ()
# 1009 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'call_action) in
    Obj.repr(
# 151 "parse.mly"
                       ()
# 1016 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'call_class) in
    Obj.repr(
# 152 "parse.mly"
                       ()
# 1023 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 154 "parse.mly"
                       ()
# 1030 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 155 "parse.mly"
                       ()
# 1037 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 156 "parse.mly"
                       ()
# 1044 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 157 "parse.mly"
                       ()
# 1051 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 158 "parse.mly"
                       ()
# 1057 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 166 "parse.mly"
                      ()
# 1065 "parse.ml"
               : 'call_action))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args_list) in
    Obj.repr(
# 169 "parse.mly"
                                 ()
# 1073 "parse.ml"
               : 'call_class))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
